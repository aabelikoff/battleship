(()=>{"use strict";var t={890:(t,r,n)=>{n.d(r,{Z:()=>B});var e=n(537),o=n.n(e),i=n(645),a=n.n(i),s=n(667),c=n.n(s),l=new URL(n(175),n.b),d=new URL(n(767),n.b),A=new URL(n(327),n.b),u=new URL(n(80),n.b),h=new URL(n(87),n.b),p=a()(o()),g=c()(l),f=c()(d),m=c()(A),C=c()(u),b=c()(h);p.push([t.id,"@font-face{\r\n    src: url("+g+');\r\n    font-family: "Share Tech Mono";\r\n}\r\nbody{\r\n    box-sizing: border-box;\r\n    background-color:gainsboro;\r\n    padding:0;\r\n    margin:0;\r\n}\r\n\r\nheader{\r\n    padding:5px;\r\n    box-sizing: border-box;\r\n    min-height: 50px;\r\n    background-color: rgb(181, 208, 219);\r\n}\r\n.logo {\r\n    height: 50px;\r\n    width: 50px;\r\n    border: 1px dotted grey;\r\n    border-radius: 5px;\r\n    float: left;\r\n    background-image: url('+f+');\r\n}\r\n\r\n.status {\r\n    font-family: "Share Tech Mono";\r\n    width: 55%;\r\n    height: 60px;\r\n    border: 1px dotted green;\r\n    margin: auto;\r\n    background-color: rgb(198, 223, 235);\r\n    display: flex;\r\n    align-items: center;\r\n    font-size: 1.21em;\r\n    padding-left: 7px;\r\n}\r\n\r\n.content{\r\n    font-family: "Share Tech Mono";\r\n    min-height: 460px;\r\n    display:flex;\r\n    flex-wrap: wrap;\r\n    align-items: center;\r\n    justify-content: space-evenly;\r\n    padding: 0;\r\n    margin:0;\r\n    background-color: rgb(181, 208, 219);\r\n}\r\n\r\n.field {\r\n    flex: 0 0 auto;\r\n    box-sizing: border-box;\r\n    height:440px;\r\n    width: 440px;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    padding:0;\r\n    margin:0;\r\n}\r\n\r\n.cell{\r\n    box-sizing: border-box;\r\n    width:40px;\r\n    height:40px;\r\n    border: 1px dotted rgb(80, 162, 209);\r\n    margin:0;\r\n}\r\n\r\n.name{\r\n    border: none;\r\n    display:flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    font-weight: bold;\r\n    color: navy;\r\n}\r\n\r\n.simple{\r\n    background-color: rgb(236, 238, 237);\r\n}\r\n\r\n.myShip{\r\n    background-color: rgb(179, 197, 197);\r\n}\r\n\r\n.enemyShip {\r\n    background-color: rgb(84, 189, 189);\r\n}\r\n\r\n.moving{\r\n    background-color: rgba(135, 204, 32,1);\r\n}\r\n\r\n.error{\r\n    background-color: rgba(240, 36, 36,1);\r\n}\r\n\r\n.hit{\r\n    background-image: url('+m+");\r\n    background-repeat: no-repeat;\r\n    background-position: center;\r\n}\r\n\r\n.miss{\r\n    background-image: url("+C+");\r\n    background-repeat: no-repeat;\r\n    background-position: center;\r\n}\r\n\r\n.controllers{\r\n    margin-top: 5px;\r\n    flex: 1 1 auto;\r\n    box-sizing: border-box;\r\n    min-height: 70px;\r\n    width: 100%;\r\n    display: flex;\r\n    align-items: flex-start;\r\n    justify-content: space-evenly;\r\n}\r\n\r\n.info {\r\n    width: 440px;\r\n    flex: 0 0 auto;\r\n    text-align: center;\r\n    font-weight: bold;\r\n    color: navy;\r\n}\r\n\r\n#randomise {\r\n    display: inline-block;\r\n}\r\n\r\n#randomise img{\r\n    position: relative;\r\n    top: 10px;\r\n}\r\n\r\n.info p{\r\n    margin:0;\r\n    padding:5px;\r\n}\r\n\r\nfooter{\r\n    height:20px;\r\n    border-top: 1px dotted rgb(0, 87, 128);\r\n    text-align: center;\r\n}\r\n\r\n.notes {\r\n    font-size: 0.7em;\r\n}\r\n\r\n#start {\r\n    font-weight: bold;\r\n    font-size: medium;\r\n    position: relative;\r\n    bottom: 50px;\r\n    left: 20px;\r\n    background-color: rgb(17, 156, 180);\r\n    height: 30px;\r\n    width: 135px;\r\n    border-radius: 10px;\r\n    border: none;\r\n    color:rgb(247, 245, 242);\r\n}\r\n\r\n#start:hover{\r\n    background-color: rgb(17, 156, 180);\r\n    color:rgb(255, 255, 252); \r\n    background-image: url("+b+");\r\n    background-repeat: no-repeat;\r\n    background-position: center;\r\n    border: 1px dotted rgb(22, 21, 21);\r\n}\r\n\r\n#start.inactive{\r\n    color: rgb(152, 161, 163);\r\n    background-color: rgb(17, 156, 180);\r\n    background-image: none;\r\n}\r\n\r\n#start.inactive:hover{\r\n    background-color: rgb(17, 156, 180);\r\n    color: rgb(152, 161, 163);\r\n}\r\n","",{version:3,sources:["webpack://./src/styles/style.css"],names:[],mappings:"AAAA;IACI,4CAA4C;IAC5C,8BAA8B;AAClC;AACA;IACI,sBAAsB;IACtB,0BAA0B;IAC1B,SAAS;IACT,QAAQ;AACZ;;AAEA;IACI,WAAW;IACX,sBAAsB;IACtB,gBAAgB;IAChB,oCAAoC;AACxC;AACA;IACI,YAAY;IACZ,WAAW;IACX,uBAAuB;IACvB,kBAAkB;IAClB,WAAW;IACX,yDAAsD;AAC1D;;AAEA;IACI,8BAA8B;IAC9B,UAAU;IACV,YAAY;IACZ,wBAAwB;IACxB,YAAY;IACZ,oCAAoC;IACpC,aAAa;IACb,mBAAmB;IACnB,iBAAiB;IACjB,iBAAiB;AACrB;;AAEA;IACI,8BAA8B;IAC9B,iBAAiB;IACjB,YAAY;IACZ,eAAe;IACf,mBAAmB;IACnB,6BAA6B;IAC7B,UAAU;IACV,QAAQ;IACR,oCAAoC;AACxC;;AAEA;IACI,cAAc;IACd,sBAAsB;IACtB,YAAY;IACZ,YAAY;IACZ,aAAa;IACb,eAAe;IACf,SAAS;IACT,QAAQ;AACZ;;AAEA;IACI,sBAAsB;IACtB,UAAU;IACV,WAAW;IACX,oCAAoC;IACpC,QAAQ;AACZ;;AAEA;IACI,YAAY;IACZ,YAAY;IACZ,mBAAmB;IACnB,uBAAuB;IACvB,iBAAiB;IACjB,WAAW;AACf;;AAEA;IACI,oCAAoC;AACxC;;AAEA;IACI,oCAAoC;AACxC;;AAEA;IACI,mCAAmC;AACvC;;AAEA;IACI,sCAAsC;AAC1C;;AAEA;IACI,qCAAqC;AACzC;;AAEA;IACI,yDAAmD;IACnD,4BAA4B;IAC5B,2BAA2B;AAC/B;;AAEA;IACI,yDAAoD;IACpD,4BAA4B;IAC5B,2BAA2B;AAC/B;;AAEA;IACI,eAAe;IACf,cAAc;IACd,sBAAsB;IACtB,gBAAgB;IAChB,WAAW;IACX,aAAa;IACb,uBAAuB;IACvB,6BAA6B;AACjC;;AAEA;IACI,YAAY;IACZ,cAAc;IACd,kBAAkB;IAClB,iBAAiB;IACjB,WAAW;AACf;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,kBAAkB;IAClB,SAAS;AACb;;AAEA;IACI,QAAQ;IACR,WAAW;AACf;;AAEA;IACI,WAAW;IACX,sCAAsC;IACtC,kBAAkB;AACtB;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,iBAAiB;IACjB,iBAAiB;IACjB,kBAAkB;IAClB,YAAY;IACZ,UAAU;IACV,mCAAmC;IACnC,YAAY;IACZ,YAAY;IACZ,mBAAmB;IACnB,YAAY;IACZ,wBAAwB;AAC5B;;AAEA;IACI,mCAAmC;IACnC,wBAAwB;IACxB,yDAAsD;IACtD,4BAA4B;IAC5B,2BAA2B;IAC3B,kCAAkC;AACtC;;AAEA;IACI,yBAAyB;IACzB,mCAAmC;IACnC,sBAAsB;AAC1B;;AAEA;IACI,mCAAmC;IACnC,yBAAyB;AAC7B",sourcesContent:['@font-face{\r\n    src: url(../fonts/ShareTechMono-Regular.ttf);\r\n    font-family: "Share Tech Mono";\r\n}\r\nbody{\r\n    box-sizing: border-box;\r\n    background-color:gainsboro;\r\n    padding:0;\r\n    margin:0;\r\n}\r\n\r\nheader{\r\n    padding:5px;\r\n    box-sizing: border-box;\r\n    min-height: 50px;\r\n    background-color: rgb(181, 208, 219);\r\n}\r\n.logo {\r\n    height: 50px;\r\n    width: 50px;\r\n    border: 1px dotted grey;\r\n    border-radius: 5px;\r\n    float: left;\r\n    background-image: url(/src/icons/icons8-battle-50.png);\r\n}\r\n\r\n.status {\r\n    font-family: "Share Tech Mono";\r\n    width: 55%;\r\n    height: 60px;\r\n    border: 1px dotted green;\r\n    margin: auto;\r\n    background-color: rgb(198, 223, 235);\r\n    display: flex;\r\n    align-items: center;\r\n    font-size: 1.21em;\r\n    padding-left: 7px;\r\n}\r\n\r\n.content{\r\n    font-family: "Share Tech Mono";\r\n    min-height: 460px;\r\n    display:flex;\r\n    flex-wrap: wrap;\r\n    align-items: center;\r\n    justify-content: space-evenly;\r\n    padding: 0;\r\n    margin:0;\r\n    background-color: rgb(181, 208, 219);\r\n}\r\n\r\n.field {\r\n    flex: 0 0 auto;\r\n    box-sizing: border-box;\r\n    height:440px;\r\n    width: 440px;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    padding:0;\r\n    margin:0;\r\n}\r\n\r\n.cell{\r\n    box-sizing: border-box;\r\n    width:40px;\r\n    height:40px;\r\n    border: 1px dotted rgb(80, 162, 209);\r\n    margin:0;\r\n}\r\n\r\n.name{\r\n    border: none;\r\n    display:flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    font-weight: bold;\r\n    color: navy;\r\n}\r\n\r\n.simple{\r\n    background-color: rgb(236, 238, 237);\r\n}\r\n\r\n.myShip{\r\n    background-color: rgb(179, 197, 197);\r\n}\r\n\r\n.enemyShip {\r\n    background-color: rgb(84, 189, 189);\r\n}\r\n\r\n.moving{\r\n    background-color: rgba(135, 204, 32,1);\r\n}\r\n\r\n.error{\r\n    background-color: rgba(240, 36, 36,1);\r\n}\r\n\r\n.hit{\r\n    background-image: url(../icons/icons8-cross-40.png);\r\n    background-repeat: no-repeat;\r\n    background-position: center;\r\n}\r\n\r\n.miss{\r\n    background-image: url(../icons/icons8-circle-10.png);\r\n    background-repeat: no-repeat;\r\n    background-position: center;\r\n}\r\n\r\n.controllers{\r\n    margin-top: 5px;\r\n    flex: 1 1 auto;\r\n    box-sizing: border-box;\r\n    min-height: 70px;\r\n    width: 100%;\r\n    display: flex;\r\n    align-items: flex-start;\r\n    justify-content: space-evenly;\r\n}\r\n\r\n.info {\r\n    width: 440px;\r\n    flex: 0 0 auto;\r\n    text-align: center;\r\n    font-weight: bold;\r\n    color: navy;\r\n}\r\n\r\n#randomise {\r\n    display: inline-block;\r\n}\r\n\r\n#randomise img{\r\n    position: relative;\r\n    top: 10px;\r\n}\r\n\r\n.info p{\r\n    margin:0;\r\n    padding:5px;\r\n}\r\n\r\nfooter{\r\n    height:20px;\r\n    border-top: 1px dotted rgb(0, 87, 128);\r\n    text-align: center;\r\n}\r\n\r\n.notes {\r\n    font-size: 0.7em;\r\n}\r\n\r\n#start {\r\n    font-weight: bold;\r\n    font-size: medium;\r\n    position: relative;\r\n    bottom: 50px;\r\n    left: 20px;\r\n    background-color: rgb(17, 156, 180);\r\n    height: 30px;\r\n    width: 135px;\r\n    border-radius: 10px;\r\n    border: none;\r\n    color:rgb(247, 245, 242);\r\n}\r\n\r\n#start:hover{\r\n    background-color: rgb(17, 156, 180);\r\n    color:rgb(255, 255, 252); \r\n    background-image: url(../icons/icons8-accuracy-50.png);\r\n    background-repeat: no-repeat;\r\n    background-position: center;\r\n    border: 1px dotted rgb(22, 21, 21);\r\n}\r\n\r\n#start.inactive{\r\n    color: rgb(152, 161, 163);\r\n    background-color: rgb(17, 156, 180);\r\n    background-image: none;\r\n}\r\n\r\n#start.inactive:hover{\r\n    background-color: rgb(17, 156, 180);\r\n    color: rgb(152, 161, 163);\r\n}\r\n'],sourceRoot:""}]);const B=p},645:t=>{t.exports=function(t){var r=[];return r.toString=function(){return this.map((function(r){var n="",e=void 0!==r[5];return r[4]&&(n+="@supports (".concat(r[4],") {")),r[2]&&(n+="@media ".concat(r[2]," {")),e&&(n+="@layer".concat(r[5].length>0?" ".concat(r[5]):""," {")),n+=t(r),e&&(n+="}"),r[2]&&(n+="}"),r[4]&&(n+="}"),n})).join("")},r.i=function(t,n,e,o,i){"string"==typeof t&&(t=[[null,t,void 0]]);var a={};if(e)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(a[c]=!0)}for(var l=0;l<t.length;l++){var d=[].concat(t[l]);e&&a[d[0]]||(void 0!==i&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=i),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),r.push(d))}},r}},667:t=>{t.exports=function(t,r){return r||(r={}),t?(t=String(t.__esModule?t.default:t),/^['"].*['"]$/.test(t)&&(t=t.slice(1,-1)),r.hash&&(t+=r.hash),/["'() \t\n]|(%20)/.test(t)||r.needQuotes?'"'.concat(t.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):t):t}},537:t=>{t.exports=function(t){var r=t[1],n=t[3];if(!n)return r;if("function"==typeof btoa){var e=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(e),i="/*# ".concat(o," */"),a=n.sources.map((function(t){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(t," */")}));return[r].concat(a).concat([i]).join("\n")}return[r].join("\n")}},379:t=>{var r=[];function n(t){for(var n=-1,e=0;e<r.length;e++)if(r[e].identifier===t){n=e;break}return n}function e(t,e){for(var i={},a=[],s=0;s<t.length;s++){var c=t[s],l=e.base?c[0]+e.base:c[0],d=i[l]||0,A="".concat(l," ").concat(d);i[l]=d+1;var u=n(A),h={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)r[u].references++,r[u].updater(h);else{var p=o(h,e);e.byIndex=s,r.splice(s,0,{identifier:A,updater:p,references:1})}a.push(A)}return a}function o(t,r){var n=r.domAPI(r);return n.update(t),function(r){if(r){if(r.css===t.css&&r.media===t.media&&r.sourceMap===t.sourceMap&&r.supports===t.supports&&r.layer===t.layer)return;n.update(t=r)}else n.remove()}}t.exports=function(t,o){var i=e(t=t||[],o=o||{});return function(t){t=t||[];for(var a=0;a<i.length;a++){var s=n(i[a]);r[s].references--}for(var c=e(t,o),l=0;l<i.length;l++){var d=n(i[l]);0===r[d].references&&(r[d].updater(),r.splice(d,1))}i=c}}},569:t=>{var r={};t.exports=function(t,n){var e=function(t){if(void 0===r[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}r[t]=n}return r[t]}(t);if(!e)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");e.appendChild(n)}},216:t=>{t.exports=function(t){var r=document.createElement("style");return t.setAttributes(r,t.attributes),t.insert(r,t.options),r}},565:(t,r,n)=>{t.exports=function(t){var r=n.nc;r&&t.setAttribute("nonce",r)}},795:t=>{t.exports=function(t){var r=t.insertStyleElement(t);return{update:function(n){!function(t,r,n){var e="";n.supports&&(e+="@supports (".concat(n.supports,") {")),n.media&&(e+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(e+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),e+=n.css,o&&(e+="}"),n.media&&(e+="}"),n.supports&&(e+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(e+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),r.styleTagTransform(e,t,r.options)}(r,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(r)}}}},589:t=>{t.exports=function(t,r){if(r.styleSheet)r.styleSheet.cssText=t;else{for(;r.firstChild;)r.removeChild(r.firstChild);r.appendChild(document.createTextNode(t))}}},175:(t,r,n)=>{t.exports=n.p+"d753b5dc50d171ecc94b.ttf"},87:(t,r,n)=>{t.exports=n.p+"2a2ae4f33624f65d21f8.png"},767:(t,r,n)=>{t.exports=n.p+"16a8361f59c30a65e2fb.png"},80:(t,r,n)=>{t.exports=n.p+"c2b38fc809da096b8276.png"},327:(t,r,n)=>{t.exports=n.p+"7c3efc95788905ba796d.png"}},r={};function n(e){var o=r[e];if(void 0!==o)return o.exports;var i=r[e]={id:e,exports:{}};return t[e](i,i.exports,n),i.exports}n.m=t,n.n=t=>{var r=t&&t.__esModule?()=>t.default:()=>t;return n.d(r,{a:r}),r},n.d=(t,r)=>{for(var e in r)n.o(r,e)&&!n.o(t,e)&&Object.defineProperty(t,e,{enumerable:!0,get:r[e]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,r)=>Object.prototype.hasOwnProperty.call(t,r),(()=>{var t;n.g.importScripts&&(t=n.g.location+"");var r=n.g.document;if(!t&&r&&(r.currentScript&&(t=r.currentScript.src),!t)){var e=r.getElementsByTagName("script");e.length&&(t=e[e.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=t})(),n.b=document.baseURI||self.location.href,n.nc=void 0,(()=>{const t=function(){let t={A:[],B:[],C:[],D:[],E:[],F:[],G:[],H:[],I:[],J:[]};const r=[],n=[],e=[];for(let r in t){let n=null;for(let e=0;e<10;e++)t[r].push(n)}const o=function(t){let r=t.match(/^([A-J])(\d+)$/);if(!r)return;let n=r[1],e=r[2];return e=parseInt(e,10),{letter:n,digit:e}},i=function(t,r,n=!0){let e,i=o(t);return e=n?"J".charCodeAt(0)-i.letter.charCodeAt(0)+1:10-i.digit+1,e>=r},a=function(t){let n=!1;return r.forEach((r=>{r.coordinates&&r.coordinates.includes(t)&&(n=r)})),n},s=function(t){return r.find((r=>r.coordinates.includes(t)))},c=function(t){let r=o(t),n="J".charCodeAt(0),e="A".charCodeAt(0),i=[],a=r.letter.charCodeAt(0)-1,s=r.digit-1;for(let t=0;t<3;t++){let r=a+t;if(r>=e&&r<=n)for(let t=0;t<3;t++){let n=s+t;if(n>=1&&n<=10){let t=String.fromCharCode(r)+n;i.push(t)}}}return i},l=function(t){let r=c(t),n=!1;return r.forEach((t=>{a(t)&&(n=!0)})),n},d=function(t,r,n=!0){let e=o(t);for(let t=0;t<r;t++){let r="";if(r=n?String.fromCharCode(e.letter.charCodeAt(0)+t)+e.digit:e.letter+(e.digit+t),l(r))return!0}return!1},A=function(t,r,n=!0){let e=[t],i=o(t);for(let t=1;t<r;t++){let r="";r=n?String.fromCharCode(i.letter.charCodeAt(0)+t)+i.digit:i.letter+(i.digit+t),e.push(r)}return e},u=function(t){let n=function(t){let r=0;return{length:t,hit:function(){r<t&&(r+=1)},isSunc:()=>r===t}}(t);return r.push(n),n},h=function(){let t=Math.floor(2*Math.random()),r="A".charCodeAt(0)+Math.floor(10*Math.random()),n=1+Math.floor(10*Math.random());return{fromCoord:String.fromCharCode(r)+n,direction:t}},p=function(t,r,n=!0){if(!i(t,r.length,n)||d(t,r.length,n))return!1;let e=A(t,r.length,n);return r.coordinates=e,r.horisontal=n,!0},g=function(t){t.coordinates=[]},f=function(t){let r=t.coordinates;g(t),p(r[0],t,!t.horisontal)||(t.coordinates=r)};return{field:t,shipContainer:r,hits:e,missedAttacks:n,detectCoordinates:o,isEnoughPlace:i,createShipCoordinates:A,placeShip:p,createShip:u,findShipCoord:a,findFieldsToVerify:c,isCloseShip:l,checkForCloseShips:d,findShipByCoord:s,hitAttack:function(r){let i=o(r).letter,a=o(r).digit;if(t[i][a-1])return;let l=s(r);return l?(t[i][a-1]="hit",e.push(r),l.hit()):(t[i][a-1]="miss",n.push(r)),l&&l.isSunc()&&function(r){r.coordinates.forEach((r=>{!function(r){c(r).forEach((r=>{let e=o(r).letter,i=o(r).digit;t[e][i-1]||(t[e][i-1]="miss",n.push(r))}))}(r)}))}(l),!0},allShipsSunk:function(){return r.reduce(((t,r)=>r.isSunc()?t+=1:t),0)===r.length},randomPlaceShips:function(){r.length&&(r.forEach((t=>{t.coordinates=[]})),r.sort(((t,r)=>r.length-t.length)),r.forEach((t=>{let r;do{r=h()}while(!p(r.fromCoord,t,r.direction))})))},createAllShips:function(){for(let t=4;t>=1;t--)for(let r=1;r<=4;r++)t+r<=5&&u(t)},rotateShip:f,rotateShipCoord:function(t){let r=s(t);f(r)},moveShip:function(t,r){let n=t.coordinates;g(t),p(r,t,t.horisontal)||(t.coordinates=n)},getInfoShoot:function(t){let r="";if(n.includes(t)&&(r="Missed shot."),e.includes(t)){r="Hit!!! ";let n=s(t);n.isSunc()?r+=`${n.length}-deck ship sunk!!!`:r+="Ship was damaged."}return r}}},r=function(t,r,n){const e=function(){let t="A".charCodeAt(0)+Math.floor(10*Math.random()),r=1+Math.floor(10*Math.random());return String.fromCharCode(t)+r},o=function(t){return!r.hits.includes(t)&&!r.missedAttacks.includes(t)},i=function(){s.forEach((t=>t.weighOptions(r)));let t=s.map((t=>t.getMax())),n=-200,e="";return t.forEach((t=>{t&&t.weight>n&&(n=t.weight,e=t.coord)})),e};class a{constructor(t){this.hit=t,this.left={coord:null,weight:0},this.right={coord:null,weight:0},this.top={coord:null,weight:0},this.bottom={coord:null,weight:0}}getCoordsForAttack(t){let r=t.detectCoordinates(this.hit),n="A".charCodeAt(0),e="J".charCodeAt(0),o=[];o.push(r.letter.charCodeAt(0)-1),o.push(r.letter.charCodeAt(0)+1),o[0]>=n&&o[0]<=e&&(this.left.coord=String.fromCharCode(o[0])+r.digit),o[1]>=n&&o[1]<=e&&(this.right.coord=String.fromCharCode(o[1])+r.digit);let i=[];i.push(r.digit-1),i.push(r.digit+1),i[0]>=1&&i[0]<=10&&(this.top.coord=r.letter+i[0]),i[1]>=1&&i[1]<=10&&(this.bottom.coord=r.letter+i[1])}weighOptions(t){for(let r in this)this[r].coord&&(t.missedAttacks.includes(this[r].coord)||t.hits.includes(this[r].coord))&&(this[r].weight=-100);for(let r in this)-100===this[r].weight&&("left"!==r||null===this.right.coord||this.right.weight||(this.right.weight+=t.hits.includes(this[r].coord)?100:50),"right"!==r||null===this.left.coord||this.left.weight||(this.left.weight+=t.hits.includes(this[r].coord)?100:50),"top"!==r||null===this.bottom.coord||this.bottom.weight||(this.bottom.weight+=t.hits.includes(this[r].coord)?100:50),"bottom"!==r||null===this.top.coord||this.top.weight||(this.top.weight+=t.hits.includes(this[r].coord)?100:50))}getMax(){let t=-1e3,r=null;for(let n in this)this[n].coord&&this[n].weight>t&&this[n].weight>=0&&(t=this[n].weight,r=this[n]);return r}}let s=[];return{ownGB:t,opponentGB:r,isCpu:n,cpuMemory:a,moveIsAvailable:o,cpuMove:function(){let t;return t=s.length?i():function(){let t;do{t=e()}while(!o(t));return t}(),new Promise((n=>{r.hitAttack(t),function(t,r){if(r.hits.includes(t)&&!r.findShipByCoord(t).isSunc()){let n=new a(t);n.getCoordsForAttack(r),s.push(n)}else r.hits.includes(t)&&r.findShipByCoord(t).isSunc()&&(s=[])}(t,r),setTimeout((()=>n(t)),500)}))},playerMove:function(t){r.hitAttack(t)},getRandomCoordinates:e,findBestMove:i,cpuHits:s}},e=n.p+"27c50fe5d53c6693a66f.png",o=n.p+"aa09b1ed57e3712407f5.png",i=function(){let t=document.createElement("link");t.rel="shortcut icon",t.type="image/x-icon",t.href=o,document.getElementsByTagName("head")[0].appendChild(t),document.querySelector("body").innerHTML='\n        <header>\n          <div class="logo"></div>\n          <div class="status"></div>\n        </header>\n        <div class="content">\n            <div class="field"></div>\n            <div class="field"></div>\n            <div class="controllers">\n              <div class="info">\n                <p >Your field</p>\n                <a id="randomise" href="#">randomise ships<img id="randImg"></a>\n              </div>\n              <div class="info">\n                <p>Enemy field</p>\n              </div>\n            </div>\n        </div>\n        <footer>\n          <div>\n                <button id="start" status="init">Start the battle!\n                </button>\n          </div>\n          <div class="author">Created by aabelikoff &#174;</div>\n          <div class="notes">&#9755;\n            <a target="_blank" href="https://icons8.com/icon/wFEdCwKpOBHs/battle">Battle</a> icon by <a target="_blank" href="https://icons8.com">Icons8</a>\n            &#9755;\n            <a target="_blank" href="https://icons8.com/icon/rxrY0sbH8IgH/shuffle">Shuffle</a> icon by <a target="_blank" href="https://icons8.com">Icons8</a>\n            &#9755;\n            <a target="_blank" href="https://icons8.com/icon/24921/accuracy">Accuracy</a> icon by <a target="_blank" href="https://icons8.com">Icons8</a>\n          </div>\n        </footer>\n  ';const r=function(){let t=document.createElement("div");return t.classList.add("cell"),t},n=function(t){let n,e="A".charCodeAt(0)-1;for(let o=0;o<11;o++)for(let i=0;i<11;i++){let a=r();n=String.fromCharCode(e+i),o||i?o&&i?(a.classList.add("simple"),a.setAttribute("coord",n+o)):(a.classList.add("name"),o||(a.textContent=n),i||(a.textContent=o)):a.classList.add("name"),t.appendChild(a)}},i=document.querySelectorAll(".field")[0],a=document.querySelectorAll(".field")[1],s=document.querySelector("#start"),c=document.querySelector(".status"),l=document.querySelector("#randomise");document.querySelector("#randImg").src=e,n(i),n(a);const d=function(t,r){return Array.from(t.childNodes).find((t=>t.getAttribute("coord")===r))},A=function(t){t.querySelectorAll(".simple").forEach((t=>{t.classList.contains("hit")&&t.classList.remove("hit"),t.classList.contains("miss")&&t.classList.remove("miss"),t.classList.contains("myShip")&&t.classList.remove("myShip"),t.classList.contains("enemyShip")&&t.classList.remove("enemyShip"),t.classList.contains("moving")&&t.classList.remove("moving")}))},u=function(t){return new Promise((r=>setTimeout(r,t)))};return{leftField:i,rightField:a,startBtn:s,status:c,randomise:l,drawShips:function(t,r){r.shipContainer.forEach((r=>{r.coordinates.forEach((r=>{d(t,r).classList.add("myShip")}))}))},findCellByCoord:d,drawShoot:function(t,r){r.hits.forEach((r=>{let n=d(t,r);n.classList.add("hit"),t===a&&n.classList.add("enemyShip")})),r.missedAttacks.forEach((r=>{d(t,r).classList.add("miss")}))},eraseField:A,eraseFields:function(){A(i),A(a)},setStatus:async function(t){c.textContent="";let r=t.split("");for(const t in r)await u(30),c.textContent+=r[t];return Promise.resolve()},toggleButtons:function(){"start"===s.getAttribute("status")?(s.textContent="Place ships",s.setAttribute("status","init")):(s.textContent="Start the battle!",s.setAttribute("status","start"))},toggleInactiveButton:function(){s.classList.contains("inactive")?s.classList.remove("inactive"):s.classList.add("inactive")}}}();var a=n(379),s=n.n(a),c=n(795),l=n.n(c),d=n(569),A=n.n(d),u=n(565),h=n.n(u),p=n(216),g=n.n(p),f=n(589),m=n.n(f),C=n(890),b={};b.styleTagTransform=m(),b.setAttributes=h(),b.insert=A().bind(null,"head"),b.domAPI=l(),b.insertStyleElement=g(),s()(C.Z,b),C.Z&&C.Z.locals&&C.Z.locals;let B=new class{constructor(){this.cpuGB,this.humanGB,this.human,this.cpu,this.cpuMove,this.gameStatus}newGame(){this.gameStatus=!1,this.cpuGB=t(),this.humanGB=t(),this.human=r(this.humanGB,this.cpuGB,!1),this.cpu=r(this.cpuGB,this.humanGB,!0),this.cpuMove=Math.floor(2*Math.random()),this.cpuGB.createAllShips(),this.humanGB.createAllShips()}checkGameStatus(){return(this.cpuGB.allShipsSunk()||this.humanGB.allShipsSunk())&&(this.gameStatus=!1),this.gameStatus}async gameStep(t){let r="";if(this.gameStatus&&!this.cpuMove&&(this.cpuMove=!0,this.human.playerMove(t),r="Your shot: "+t+". "+this.cpuGB.getInfoShoot(t),i.drawShoot(i.rightField,this.cpuGB),await i.setStatus(r),this.checkGameStatus()),this.gameStatus&&this.cpuMove){let t=await this.cpu.cpuMove();r="Enemy's shot: "+t+". "+this.humanGB.getInfoShoot(t),i.drawShoot(i.leftField,this.humanGB),await i.setStatus(r),this.checkGameStatus(),this.cpuMove=!1}this.gameStatus||this.finishGame()}finishGame(){if(!this.humanGB.allShipsSunk()&&!this.cpuGB.allShipsSunk())return;let t="";this.humanGB.allShipsSunk()?this.humanGB.allShipsSunk()&&(t="Sorry! You lose!"):t="Congratulatulations! You are the winner!",i.setStatus(t),i.startBtn.setAttribute("status","init"),i.toggleInactiveButton()}async initGame(){i.startBtn.setAttribute("status","inactive"),this.newGame(),this.gameStatus=!1,this.cpuGB.randomPlaceShips(),this.humanGB.randomPlaceShips(),i.eraseFields(),await i.setStatus("Welcome to the new game. Follow the instructions."),await i.setStatus('Drag and drop to place your ships. Double click to rotate. Ships can\'t be disposed side by side. Press "Start the battle!" to start.'),i.drawShips(i.leftField,this.humanGB),i.startBtn.setAttribute("status","start")}async startGame(){this.gameStatus=!0,this.cpuMove=Math.floor(2*Math.random());let t="Game is on.";this.cpuMove?t+=" Computer shoots first.":t+=" You shoot first.",await i.setStatus(t),this.cpuMove&&this.gameStep()}};B.initGame(),(t=>{let r={};function n(n){if(t.gameStatus)return;let e=n.target,o=e.getAttribute("coord"),i=t.humanGB.findShipByCoord(o);i&&(r.fromElem=e,r.ship=i,r.fromCoord=o,r.pos=i.coordinates.findIndex((t=>t===o)),n.preventDefault())}function e(n,e){let o,i=t.humanGB.detectCoordinates(e).letter,a=t.humanGB.detectCoordinates(e).digit;return o=n.horisontal?String.fromCharCode(i.charCodeAt(0)-r.pos)+a:i+(a-r.pos),o}function o(n){var o,a;r.ship&&(o=function(n){let o=e(r.ship,n);return t.humanGB.createShipCoordinates(o,r.ship.length,r.ship.horisontal).map((t=>i.leftField.querySelector(`[coord=${t}]`)))}(n.target.getAttribute("coord")),a="moving",i.leftField.querySelectorAll(".simple").forEach((t=>{o.includes(t)?t.classList.add(a):t.classList.remove(a)})),n.preventDefault())}function a(n){let o=n.target.getAttribute("coord");if(!r.fromElem)return;let a=e(r.ship,o);t.humanGB.moveShip(r.ship,a),r={},i.eraseField(i.leftField),i.drawShips(i.leftField,t.humanGB),n.preventDefault()}i.startBtn.addEventListener("click",(r=>{r.preventDefault(),"inactive"!==r.target.getAttribute("status")&&("init"===r.target.getAttribute("status")&&t.gameStatus||("start"!==r.target.getAttribute("status")||t.gameStatus?"init"!==r.target.getAttribute("status")||t.gameStatus||t.initGame():(t.startGame(),i.toggleInactiveButton()),i.toggleButtons()))})),i.randomise.addEventListener("click",(r=>{r.preventDefault(),"inactive"!==i.startBtn.getAttribute("status")&&"init"!==i.startBtn.getAttribute("status")&&(t.gameStatus||"start"!==i.startBtn.getAttribute("status")||(t.humanGB.randomPlaceShips(),i.eraseField(i.leftField),i.drawShips(i.leftField,t.humanGB)))})),i.rightField.addEventListener("click",(function(r){if(r.preventDefault(),t.gameStatus&&r.target.classList.contains("simple")&&!t.cpuMove){let n=r.target.getAttribute("coord");t.gameStep(n)}})),i.leftField.addEventListener("dblclick",(function(r){if(!t.gameStatus){let n=r.target.getAttribute("coord");t.humanGB.rotateShipCoord(n),i.eraseField(i.leftField),i.drawShips(i.leftField,t.humanGB)}})),Array.from(i.leftField.querySelectorAll(".simple")).forEach((t=>{t.addEventListener("mousedown",n),t.addEventListener("mouseup",a),t.addEventListener("mouseover",o)}))})(B)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUNzQyxVQUE1Qyx3QkFBOEIsWUFFOUJRLEVBQUtYLFFBQVE1RSxtQkFDYixhQUFtQixhQUNuQixZQUFrQixZQUFtQnVGLEVBQUtYLGNBd0I5Qyw4QkFBb0MsU0FwQnBDLFNBQXdCYyxHQUV0QixHQURBQSxFQUFNSSxpQkFDRFAsRUFBS1IsWUFHTlcsRUFBTWxPLE9BQU9xTCxVQUFVa0IsU0FBUyxZQUFjd0IsRUFBS3hELFFBQVMsQ0FDOUQsSUFBSXJDLEVBQVFnRyxFQUFNbE8sT0FBT3FNLGFBQWEsU0FDdEMwQixFQUFLRixTQUFTM0YsT0FjbEIsNkJBQW1DLFlBVm5DLFNBQTJCZ0csR0FDekIsSUFBS0gsRUFBS1IsV0FBWSxDQUNwQixJQUFJckYsRUFBUWdHLEVBQU1sTyxPQUFPcU0sYUFBYSxTQUN0QzBCLEVBQUtYLFFBQVF4RSxnQkFBZ0JWLEdBQzdCLGFBQW1CLGFBQ25CLFlBQWtCLFlBQW1CNkYsRUFBS1gsYUFnR2xDbEIsTUFBTUMsS0FBSyw2QkFBbUMsWUFDcERuRyxTQUFTbUMsSUFDYkEsRUFBSzhHLGlCQUFpQixZQUFhaEIsR0FDbkM5RixFQUFLOEcsaUJBQWlCLFVBQVdILEdBQ2pDM0csRUFBSzhHLGlCQUFpQixZQUFhUCxPRnpKdkMsQ0FBTzVMLEkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL3N0eWxlcy9zdHlsZS5jc3MiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRVcmwuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvcHVibGljUGF0aCIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9qc29ucCBjaHVuayBsb2FkaW5nIiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL25vbmNlIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvc2hpcC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2dhbWVib2FyZC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL3BsYXllci5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2Rpc3BsYXkuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9zdHlsZXMvc3R5bGUuY3NzP2ZmOTQiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2dhbWUuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9ldmVudHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fID0gbmV3IFVSTChcIi4uL2ZvbnRzL1NoYXJlVGVjaE1vbm8tUmVndWxhci50dGZcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMV9fXyA9IG5ldyBVUkwoXCIvc3JjL2ljb25zL2ljb25zOC1iYXR0bGUtNTAucG5nXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzJfX18gPSBuZXcgVVJMKFwiLi4vaWNvbnMvaWNvbnM4LWNyb3NzLTQwLnBuZ1wiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8zX19fID0gbmV3IFVSTChcIi4uL2ljb25zL2ljb25zOC1jaXJjbGUtMTAucG5nXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzRfX18gPSBuZXcgVVJMKFwiLi4vaWNvbnMvaWNvbnM4LWFjY3VyYWN5LTUwLnBuZ1wiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMV9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMl9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzJfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzNfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8zX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF80X19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfNF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCJAZm9udC1mYWNle1xcclxcbiAgICBzcmM6IHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gKyBcIik7XFxyXFxuICAgIGZvbnQtZmFtaWx5OiBcXFwiU2hhcmUgVGVjaCBNb25vXFxcIjtcXHJcXG59XFxyXFxuYm9keXtcXHJcXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjpnYWluc2Jvcm87XFxyXFxuICAgIHBhZGRpbmc6MDtcXHJcXG4gICAgbWFyZ2luOjA7XFxyXFxufVxcclxcblxcclxcbmhlYWRlcntcXHJcXG4gICAgcGFkZGluZzo1cHg7XFxyXFxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxyXFxuICAgIG1pbi1oZWlnaHQ6IDUwcHg7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigxODEsIDIwOCwgMjE5KTtcXHJcXG59XFxyXFxuLmxvZ28ge1xcclxcbiAgICBoZWlnaHQ6IDUwcHg7XFxyXFxuICAgIHdpZHRoOiA1MHB4O1xcclxcbiAgICBib3JkZXI6IDFweCBkb3R0ZWQgZ3JleTtcXHJcXG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xcclxcbiAgICBmbG9hdDogbGVmdDtcXHJcXG4gICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMV9fXyArIFwiKTtcXHJcXG59XFxyXFxuXFxyXFxuLnN0YXR1cyB7XFxyXFxuICAgIGZvbnQtZmFtaWx5OiBcXFwiU2hhcmUgVGVjaCBNb25vXFxcIjtcXHJcXG4gICAgd2lkdGg6IDU1JTtcXHJcXG4gICAgaGVpZ2h0OiA2MHB4O1xcclxcbiAgICBib3JkZXI6IDFweCBkb3R0ZWQgZ3JlZW47XFxyXFxuICAgIG1hcmdpbjogYXV0bztcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDE5OCwgMjIzLCAyMzUpO1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgICBmb250LXNpemU6IDEuMjFlbTtcXHJcXG4gICAgcGFkZGluZy1sZWZ0OiA3cHg7XFxyXFxufVxcclxcblxcclxcbi5jb250ZW50e1xcclxcbiAgICBmb250LWZhbWlseTogXFxcIlNoYXJlIFRlY2ggTW9ub1xcXCI7XFxyXFxuICAgIG1pbi1oZWlnaHQ6IDQ2MHB4O1xcclxcbiAgICBkaXNwbGF5OmZsZXg7XFxyXFxuICAgIGZsZXgtd3JhcDogd3JhcDtcXHJcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1ldmVubHk7XFxyXFxuICAgIHBhZGRpbmc6IDA7XFxyXFxuICAgIG1hcmdpbjowO1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMTgxLCAyMDgsIDIxOSk7XFxyXFxufVxcclxcblxcclxcbi5maWVsZCB7XFxyXFxuICAgIGZsZXg6IDAgMCBhdXRvO1xcclxcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcclxcbiAgICBoZWlnaHQ6NDQwcHg7XFxyXFxuICAgIHdpZHRoOiA0NDBweDtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgZmxleC13cmFwOiB3cmFwO1xcclxcbiAgICBwYWRkaW5nOjA7XFxyXFxuICAgIG1hcmdpbjowO1xcclxcbn1cXHJcXG5cXHJcXG4uY2VsbHtcXHJcXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXHJcXG4gICAgd2lkdGg6NDBweDtcXHJcXG4gICAgaGVpZ2h0OjQwcHg7XFxyXFxuICAgIGJvcmRlcjogMXB4IGRvdHRlZCByZ2IoODAsIDE2MiwgMjA5KTtcXHJcXG4gICAgbWFyZ2luOjA7XFxyXFxufVxcclxcblxcclxcbi5uYW1le1xcclxcbiAgICBib3JkZXI6IG5vbmU7XFxyXFxuICAgIGRpc3BsYXk6ZmxleDtcXHJcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxyXFxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xcclxcbiAgICBjb2xvcjogbmF2eTtcXHJcXG59XFxyXFxuXFxyXFxuLnNpbXBsZXtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDIzNiwgMjM4LCAyMzcpO1xcclxcbn1cXHJcXG5cXHJcXG4ubXlTaGlwe1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMTc5LCAxOTcsIDE5Nyk7XFxyXFxufVxcclxcblxcclxcbi5lbmVteVNoaXAge1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoODQsIDE4OSwgMTg5KTtcXHJcXG59XFxyXFxuXFxyXFxuLm1vdmluZ3tcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgxMzUsIDIwNCwgMzIsMSk7XFxyXFxufVxcclxcblxcclxcbi5lcnJvcntcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNDAsIDM2LCAzNiwxKTtcXHJcXG59XFxyXFxuXFxyXFxuLmhpdHtcXHJcXG4gICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMl9fXyArIFwiKTtcXHJcXG4gICAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcXHJcXG4gICAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyO1xcclxcbn1cXHJcXG5cXHJcXG4ubWlzc3tcXHJcXG4gICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfM19fXyArIFwiKTtcXHJcXG4gICAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcXHJcXG4gICAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyO1xcclxcbn1cXHJcXG5cXHJcXG4uY29udHJvbGxlcnN7XFxyXFxuICAgIG1hcmdpbi10b3A6IDVweDtcXHJcXG4gICAgZmxleDogMSAxIGF1dG87XFxyXFxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxyXFxuICAgIG1pbi1oZWlnaHQ6IDcwcHg7XFxyXFxuICAgIHdpZHRoOiAxMDAlO1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBhbGlnbi1pdGVtczogZmxleC1zdGFydDtcXHJcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1ldmVubHk7XFxyXFxufVxcclxcblxcclxcbi5pbmZvIHtcXHJcXG4gICAgd2lkdGg6IDQ0MHB4O1xcclxcbiAgICBmbGV4OiAwIDAgYXV0bztcXHJcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcclxcbiAgICBmb250LXdlaWdodDogYm9sZDtcXHJcXG4gICAgY29sb3I6IG5hdnk7XFxyXFxufVxcclxcblxcclxcbiNyYW5kb21pc2Uge1xcclxcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxyXFxufVxcclxcblxcclxcbiNyYW5kb21pc2UgaW1ne1xcclxcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxuICAgIHRvcDogMTBweDtcXHJcXG59XFxyXFxuXFxyXFxuLmluZm8gcHtcXHJcXG4gICAgbWFyZ2luOjA7XFxyXFxuICAgIHBhZGRpbmc6NXB4O1xcclxcbn1cXHJcXG5cXHJcXG5mb290ZXJ7XFxyXFxuICAgIGhlaWdodDoyMHB4O1xcclxcbiAgICBib3JkZXItdG9wOiAxcHggZG90dGVkIHJnYigwLCA4NywgMTI4KTtcXHJcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcclxcbn1cXHJcXG5cXHJcXG4ubm90ZXMge1xcclxcbiAgICBmb250LXNpemU6IDAuN2VtO1xcclxcbn1cXHJcXG5cXHJcXG4jc3RhcnQge1xcclxcbiAgICBmb250LXdlaWdodDogYm9sZDtcXHJcXG4gICAgZm9udC1zaXplOiBtZWRpdW07XFxyXFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG4gICAgYm90dG9tOiA1MHB4O1xcclxcbiAgICBsZWZ0OiAyMHB4O1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMTcsIDE1NiwgMTgwKTtcXHJcXG4gICAgaGVpZ2h0OiAzMHB4O1xcclxcbiAgICB3aWR0aDogMTM1cHg7XFxyXFxuICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XFxyXFxuICAgIGJvcmRlcjogbm9uZTtcXHJcXG4gICAgY29sb3I6cmdiKDI0NywgMjQ1LCAyNDIpO1xcclxcbn1cXHJcXG5cXHJcXG4jc3RhcnQ6aG92ZXJ7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigxNywgMTU2LCAxODApO1xcclxcbiAgICBjb2xvcjpyZ2IoMjU1LCAyNTUsIDI1Mik7IFxcclxcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF80X19fICsgXCIpO1xcclxcbiAgICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xcclxcbiAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBjZW50ZXI7XFxyXFxuICAgIGJvcmRlcjogMXB4IGRvdHRlZCByZ2IoMjIsIDIxLCAyMSk7XFxyXFxufVxcclxcblxcclxcbiNzdGFydC5pbmFjdGl2ZXtcXHJcXG4gICAgY29sb3I6IHJnYigxNTIsIDE2MSwgMTYzKTtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDE3LCAxNTYsIDE4MCk7XFxyXFxuICAgIGJhY2tncm91bmQtaW1hZ2U6IG5vbmU7XFxyXFxufVxcclxcblxcclxcbiNzdGFydC5pbmFjdGl2ZTpob3ZlcntcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDE3LCAxNTYsIDE4MCk7XFxyXFxuICAgIGNvbG9yOiByZ2IoMTUyLCAxNjEsIDE2Myk7XFxyXFxufVxcclxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZXMvc3R5bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0lBQ0ksNENBQTRDO0lBQzVDLDhCQUE4QjtBQUNsQztBQUNBO0lBQ0ksc0JBQXNCO0lBQ3RCLDBCQUEwQjtJQUMxQixTQUFTO0lBQ1QsUUFBUTtBQUNaOztBQUVBO0lBQ0ksV0FBVztJQUNYLHNCQUFzQjtJQUN0QixnQkFBZ0I7SUFDaEIsb0NBQW9DO0FBQ3hDO0FBQ0E7SUFDSSxZQUFZO0lBQ1osV0FBVztJQUNYLHVCQUF1QjtJQUN2QixrQkFBa0I7SUFDbEIsV0FBVztJQUNYLHlEQUFzRDtBQUMxRDs7QUFFQTtJQUNJLDhCQUE4QjtJQUM5QixVQUFVO0lBQ1YsWUFBWTtJQUNaLHdCQUF3QjtJQUN4QixZQUFZO0lBQ1osb0NBQW9DO0lBQ3BDLGFBQWE7SUFDYixtQkFBbUI7SUFDbkIsaUJBQWlCO0lBQ2pCLGlCQUFpQjtBQUNyQjs7QUFFQTtJQUNJLDhCQUE4QjtJQUM5QixpQkFBaUI7SUFDakIsWUFBWTtJQUNaLGVBQWU7SUFDZixtQkFBbUI7SUFDbkIsNkJBQTZCO0lBQzdCLFVBQVU7SUFDVixRQUFRO0lBQ1Isb0NBQW9DO0FBQ3hDOztBQUVBO0lBQ0ksY0FBYztJQUNkLHNCQUFzQjtJQUN0QixZQUFZO0lBQ1osWUFBWTtJQUNaLGFBQWE7SUFDYixlQUFlO0lBQ2YsU0FBUztJQUNULFFBQVE7QUFDWjs7QUFFQTtJQUNJLHNCQUFzQjtJQUN0QixVQUFVO0lBQ1YsV0FBVztJQUNYLG9DQUFvQztJQUNwQyxRQUFRO0FBQ1o7O0FBRUE7SUFDSSxZQUFZO0lBQ1osWUFBWTtJQUNaLG1CQUFtQjtJQUNuQix1QkFBdUI7SUFDdkIsaUJBQWlCO0lBQ2pCLFdBQVc7QUFDZjs7QUFFQTtJQUNJLG9DQUFvQztBQUN4Qzs7QUFFQTtJQUNJLG9DQUFvQztBQUN4Qzs7QUFFQTtJQUNJLG1DQUFtQztBQUN2Qzs7QUFFQTtJQUNJLHNDQUFzQztBQUMxQzs7QUFFQTtJQUNJLHFDQUFxQztBQUN6Qzs7QUFFQTtJQUNJLHlEQUFtRDtJQUNuRCw0QkFBNEI7SUFDNUIsMkJBQTJCO0FBQy9COztBQUVBO0lBQ0kseURBQW9EO0lBQ3BELDRCQUE0QjtJQUM1QiwyQkFBMkI7QUFDL0I7O0FBRUE7SUFDSSxlQUFlO0lBQ2YsY0FBYztJQUNkLHNCQUFzQjtJQUN0QixnQkFBZ0I7SUFDaEIsV0FBVztJQUNYLGFBQWE7SUFDYix1QkFBdUI7SUFDdkIsNkJBQTZCO0FBQ2pDOztBQUVBO0lBQ0ksWUFBWTtJQUNaLGNBQWM7SUFDZCxrQkFBa0I7SUFDbEIsaUJBQWlCO0lBQ2pCLFdBQVc7QUFDZjs7QUFFQTtJQUNJLHFCQUFxQjtBQUN6Qjs7QUFFQTtJQUNJLGtCQUFrQjtJQUNsQixTQUFTO0FBQ2I7O0FBRUE7SUFDSSxRQUFRO0lBQ1IsV0FBVztBQUNmOztBQUVBO0lBQ0ksV0FBVztJQUNYLHNDQUFzQztJQUN0QyxrQkFBa0I7QUFDdEI7O0FBRUE7SUFDSSxnQkFBZ0I7QUFDcEI7O0FBRUE7SUFDSSxpQkFBaUI7SUFDakIsaUJBQWlCO0lBQ2pCLGtCQUFrQjtJQUNsQixZQUFZO0lBQ1osVUFBVTtJQUNWLG1DQUFtQztJQUNuQyxZQUFZO0lBQ1osWUFBWTtJQUNaLG1CQUFtQjtJQUNuQixZQUFZO0lBQ1osd0JBQXdCO0FBQzVCOztBQUVBO0lBQ0ksbUNBQW1DO0lBQ25DLHdCQUF3QjtJQUN4Qix5REFBc0Q7SUFDdEQsNEJBQTRCO0lBQzVCLDJCQUEyQjtJQUMzQixrQ0FBa0M7QUFDdEM7O0FBRUE7SUFDSSx5QkFBeUI7SUFDekIsbUNBQW1DO0lBQ25DLHNCQUFzQjtBQUMxQjs7QUFFQTtJQUNJLG1DQUFtQztJQUNuQyx5QkFBeUI7QUFDN0JcIixcInNvdXJjZXNDb250ZW50XCI6W1wiQGZvbnQtZmFjZXtcXHJcXG4gICAgc3JjOiB1cmwoLi4vZm9udHMvU2hhcmVUZWNoTW9uby1SZWd1bGFyLnR0Zik7XFxyXFxuICAgIGZvbnQtZmFtaWx5OiBcXFwiU2hhcmUgVGVjaCBNb25vXFxcIjtcXHJcXG59XFxyXFxuYm9keXtcXHJcXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjpnYWluc2Jvcm87XFxyXFxuICAgIHBhZGRpbmc6MDtcXHJcXG4gICAgbWFyZ2luOjA7XFxyXFxufVxcclxcblxcclxcbmhlYWRlcntcXHJcXG4gICAgcGFkZGluZzo1cHg7XFxyXFxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxyXFxuICAgIG1pbi1oZWlnaHQ6IDUwcHg7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigxODEsIDIwOCwgMjE5KTtcXHJcXG59XFxyXFxuLmxvZ28ge1xcclxcbiAgICBoZWlnaHQ6IDUwcHg7XFxyXFxuICAgIHdpZHRoOiA1MHB4O1xcclxcbiAgICBib3JkZXI6IDFweCBkb3R0ZWQgZ3JleTtcXHJcXG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xcclxcbiAgICBmbG9hdDogbGVmdDtcXHJcXG4gICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKC9zcmMvaWNvbnMvaWNvbnM4LWJhdHRsZS01MC5wbmcpO1xcclxcbn1cXHJcXG5cXHJcXG4uc3RhdHVzIHtcXHJcXG4gICAgZm9udC1mYW1pbHk6IFxcXCJTaGFyZSBUZWNoIE1vbm9cXFwiO1xcclxcbiAgICB3aWR0aDogNTUlO1xcclxcbiAgICBoZWlnaHQ6IDYwcHg7XFxyXFxuICAgIGJvcmRlcjogMXB4IGRvdHRlZCBncmVlbjtcXHJcXG4gICAgbWFyZ2luOiBhdXRvO1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMTk4LCAyMjMsIDIzNSk7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICAgIGZvbnQtc2l6ZTogMS4yMWVtO1xcclxcbiAgICBwYWRkaW5nLWxlZnQ6IDdweDtcXHJcXG59XFxyXFxuXFxyXFxuLmNvbnRlbnR7XFxyXFxuICAgIGZvbnQtZmFtaWx5OiBcXFwiU2hhcmUgVGVjaCBNb25vXFxcIjtcXHJcXG4gICAgbWluLWhlaWdodDogNDYwcHg7XFxyXFxuICAgIGRpc3BsYXk6ZmxleDtcXHJcXG4gICAgZmxleC13cmFwOiB3cmFwO1xcclxcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWV2ZW5seTtcXHJcXG4gICAgcGFkZGluZzogMDtcXHJcXG4gICAgbWFyZ2luOjA7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigxODEsIDIwOCwgMjE5KTtcXHJcXG59XFxyXFxuXFxyXFxuLmZpZWxkIHtcXHJcXG4gICAgZmxleDogMCAwIGF1dG87XFxyXFxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxyXFxuICAgIGhlaWdodDo0NDBweDtcXHJcXG4gICAgd2lkdGg6IDQ0MHB4O1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBmbGV4LXdyYXA6IHdyYXA7XFxyXFxuICAgIHBhZGRpbmc6MDtcXHJcXG4gICAgbWFyZ2luOjA7XFxyXFxufVxcclxcblxcclxcbi5jZWxse1xcclxcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcclxcbiAgICB3aWR0aDo0MHB4O1xcclxcbiAgICBoZWlnaHQ6NDBweDtcXHJcXG4gICAgYm9yZGVyOiAxcHggZG90dGVkIHJnYig4MCwgMTYyLCAyMDkpO1xcclxcbiAgICBtYXJnaW46MDtcXHJcXG59XFxyXFxuXFxyXFxuLm5hbWV7XFxyXFxuICAgIGJvcmRlcjogbm9uZTtcXHJcXG4gICAgZGlzcGxheTpmbGV4O1xcclxcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxyXFxuICAgIGNvbG9yOiBuYXZ5O1xcclxcbn1cXHJcXG5cXHJcXG4uc2ltcGxle1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjM2LCAyMzgsIDIzNyk7XFxyXFxufVxcclxcblxcclxcbi5teVNoaXB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigxNzksIDE5NywgMTk3KTtcXHJcXG59XFxyXFxuXFxyXFxuLmVuZW15U2hpcCB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYig4NCwgMTg5LCAxODkpO1xcclxcbn1cXHJcXG5cXHJcXG4ubW92aW5ne1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDEzNSwgMjA0LCAzMiwxKTtcXHJcXG59XFxyXFxuXFxyXFxuLmVycm9ye1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI0MCwgMzYsIDM2LDEpO1xcclxcbn1cXHJcXG5cXHJcXG4uaGl0e1xcclxcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoLi4vaWNvbnMvaWNvbnM4LWNyb3NzLTQwLnBuZyk7XFxyXFxuICAgIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XFxyXFxuICAgIGJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlcjtcXHJcXG59XFxyXFxuXFxyXFxuLm1pc3N7XFxyXFxuICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybCguLi9pY29ucy9pY29uczgtY2lyY2xlLTEwLnBuZyk7XFxyXFxuICAgIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XFxyXFxuICAgIGJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlcjtcXHJcXG59XFxyXFxuXFxyXFxuLmNvbnRyb2xsZXJze1xcclxcbiAgICBtYXJnaW4tdG9wOiA1cHg7XFxyXFxuICAgIGZsZXg6IDEgMSBhdXRvO1xcclxcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcclxcbiAgICBtaW4taGVpZ2h0OiA3MHB4O1xcclxcbiAgICB3aWR0aDogMTAwJTtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtZXZlbmx5O1xcclxcbn1cXHJcXG5cXHJcXG4uaW5mbyB7XFxyXFxuICAgIHdpZHRoOiA0NDBweDtcXHJcXG4gICAgZmxleDogMCAwIGF1dG87XFxyXFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXHJcXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxyXFxuICAgIGNvbG9yOiBuYXZ5O1xcclxcbn1cXHJcXG5cXHJcXG4jcmFuZG9taXNlIHtcXHJcXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcclxcbn1cXHJcXG5cXHJcXG4jcmFuZG9taXNlIGltZ3tcXHJcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgICB0b3A6IDEwcHg7XFxyXFxufVxcclxcblxcclxcbi5pbmZvIHB7XFxyXFxuICAgIG1hcmdpbjowO1xcclxcbiAgICBwYWRkaW5nOjVweDtcXHJcXG59XFxyXFxuXFxyXFxuZm9vdGVye1xcclxcbiAgICBoZWlnaHQ6MjBweDtcXHJcXG4gICAgYm9yZGVyLXRvcDogMXB4IGRvdHRlZCByZ2IoMCwgODcsIDEyOCk7XFxyXFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXHJcXG59XFxyXFxuXFxyXFxuLm5vdGVzIHtcXHJcXG4gICAgZm9udC1zaXplOiAwLjdlbTtcXHJcXG59XFxyXFxuXFxyXFxuI3N0YXJ0IHtcXHJcXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxyXFxuICAgIGZvbnQtc2l6ZTogbWVkaXVtO1xcclxcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxuICAgIGJvdHRvbTogNTBweDtcXHJcXG4gICAgbGVmdDogMjBweDtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDE3LCAxNTYsIDE4MCk7XFxyXFxuICAgIGhlaWdodDogMzBweDtcXHJcXG4gICAgd2lkdGg6IDEzNXB4O1xcclxcbiAgICBib3JkZXItcmFkaXVzOiAxMHB4O1xcclxcbiAgICBib3JkZXI6IG5vbmU7XFxyXFxuICAgIGNvbG9yOnJnYigyNDcsIDI0NSwgMjQyKTtcXHJcXG59XFxyXFxuXFxyXFxuI3N0YXJ0OmhvdmVye1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMTcsIDE1NiwgMTgwKTtcXHJcXG4gICAgY29sb3I6cmdiKDI1NSwgMjU1LCAyNTIpOyBcXHJcXG4gICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKC4uL2ljb25zL2ljb25zOC1hY2N1cmFjeS01MC5wbmcpO1xcclxcbiAgICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xcclxcbiAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBjZW50ZXI7XFxyXFxuICAgIGJvcmRlcjogMXB4IGRvdHRlZCByZ2IoMjIsIDIxLCAyMSk7XFxyXFxufVxcclxcblxcclxcbiNzdGFydC5pbmFjdGl2ZXtcXHJcXG4gICAgY29sb3I6IHJnYigxNTIsIDE2MSwgMTYzKTtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDE3LCAxNTYsIDE4MCk7XFxyXFxuICAgIGJhY2tncm91bmQtaW1hZ2U6IG5vbmU7XFxyXFxufVxcclxcblxcclxcbiNzdGFydC5pbmFjdGl2ZTpob3ZlcntcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDE3LCAxNTYsIDE4MCk7XFxyXFxuICAgIGNvbG9yOiByZ2IoMTUyLCAxNjEsIDE2Myk7XFxyXFxufVxcclxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcblxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cblxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuXG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuXG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG5cbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVybCwgb3B0aW9ucykge1xuICBpZiAoIW9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICBpZiAoIXVybCkge1xuICAgIHJldHVybiB1cmw7XG4gIH1cblxuICB1cmwgPSBTdHJpbmcodXJsLl9fZXNNb2R1bGUgPyB1cmwuZGVmYXVsdCA6IHVybCk7IC8vIElmIHVybCBpcyBhbHJlYWR5IHdyYXBwZWQgaW4gcXVvdGVzLCByZW1vdmUgdGhlbVxuXG4gIGlmICgvXlsnXCJdLipbJ1wiXSQvLnRlc3QodXJsKSkge1xuICAgIHVybCA9IHVybC5zbGljZSgxLCAtMSk7XG4gIH1cblxuICBpZiAob3B0aW9ucy5oYXNoKSB7XG4gICAgdXJsICs9IG9wdGlvbnMuaGFzaDtcbiAgfSAvLyBTaG91bGQgdXJsIGJlIHdyYXBwZWQ/XG4gIC8vIFNlZSBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLXZhbHVlcy0zLyN1cmxzXG5cblxuICBpZiAoL1tcIicoKSBcXHRcXG5dfCglMjApLy50ZXN0KHVybCkgfHwgb3B0aW9ucy5uZWVkUXVvdGVzKSB7XG4gICAgcmV0dXJuIFwiXFxcIlwiLmNvbmNhdCh1cmwucmVwbGFjZSgvXCIvZywgJ1xcXFxcIicpLnJlcGxhY2UoL1xcbi9nLCBcIlxcXFxuXCIpLCBcIlxcXCJcIik7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8IFwiXCIpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG5cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuXG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuXG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB1cGRhdGVyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuXG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuXG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuXG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG5cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuXG4gIGNzcyArPSBvYmouY3NzO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuLy8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbl9fd2VicGFja19yZXF1aXJlX18ubSA9IF9fd2VicGFja19tb2R1bGVzX187XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwidmFyIHNjcmlwdFVybDtcbmlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLmcuaW1wb3J0U2NyaXB0cykgc2NyaXB0VXJsID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmxvY2F0aW9uICsgXCJcIjtcbnZhciBkb2N1bWVudCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5kb2N1bWVudDtcbmlmICghc2NyaXB0VXJsICYmIGRvY3VtZW50KSB7XG5cdGlmIChkb2N1bWVudC5jdXJyZW50U2NyaXB0KVxuXHRcdHNjcmlwdFVybCA9IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQuc3JjXG5cdGlmICghc2NyaXB0VXJsKSB7XG5cdFx0dmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTtcblx0XHRpZihzY3JpcHRzLmxlbmd0aCkgc2NyaXB0VXJsID0gc2NyaXB0c1tzY3JpcHRzLmxlbmd0aCAtIDFdLnNyY1xuXHR9XG59XG4vLyBXaGVuIHN1cHBvcnRpbmcgYnJvd3NlcnMgd2hlcmUgYW4gYXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCB5b3UgbXVzdCBzcGVjaWZ5IGFuIG91dHB1dC5wdWJsaWNQYXRoIG1hbnVhbGx5IHZpYSBjb25maWd1cmF0aW9uXG4vLyBvciBwYXNzIGFuIGVtcHR5IHN0cmluZyAoXCJcIikgYW5kIHNldCB0aGUgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gdmFyaWFibGUgZnJvbSB5b3VyIGNvZGUgdG8gdXNlIHlvdXIgb3duIGxvZ2ljLlxuaWYgKCFzY3JpcHRVcmwpIHRocm93IG5ldyBFcnJvcihcIkF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBicm93c2VyXCIpO1xuc2NyaXB0VXJsID0gc2NyaXB0VXJsLnJlcGxhY2UoLyMuKiQvLCBcIlwiKS5yZXBsYWNlKC9cXD8uKiQvLCBcIlwiKS5yZXBsYWNlKC9cXC9bXlxcL10rJC8sIFwiL1wiKTtcbl9fd2VicGFja19yZXF1aXJlX18ucCA9IHNjcmlwdFVybDsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmIgPSBkb2N1bWVudC5iYXNlVVJJIHx8IHNlbGYubG9jYXRpb24uaHJlZjtcblxuLy8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3Ncbi8vIHVuZGVmaW5lZCA9IGNodW5rIG5vdCBsb2FkZWQsIG51bGwgPSBjaHVuayBwcmVsb2FkZWQvcHJlZmV0Y2hlZFxuLy8gW3Jlc29sdmUsIHJlamVjdCwgUHJvbWlzZV0gPSBjaHVuayBsb2FkaW5nLCAwID0gY2h1bmsgbG9hZGVkXG52YXIgaW5zdGFsbGVkQ2h1bmtzID0ge1xuXHQxNzk6IDBcbn07XG5cbi8vIG5vIGNodW5rIG9uIGRlbWFuZCBsb2FkaW5nXG5cbi8vIG5vIHByZWZldGNoaW5nXG5cbi8vIG5vIHByZWxvYWRlZFxuXG4vLyBubyBITVJcblxuLy8gbm8gSE1SIG1hbmlmZXN0XG5cbi8vIG5vIG9uIGNodW5rcyBsb2FkZWRcblxuLy8gbm8ganNvbnAgZnVuY3Rpb24iLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm5jID0gdW5kZWZpbmVkOyIsImNvbnN0IFNoaXAgPSBmdW5jdGlvbiAobGVuZ3RoKSB7XHJcbiAgbGV0IGRhbWFnZXMgPSAwO1xyXG5cclxuICBjb25zdCBoaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBpZiAoZGFtYWdlcyA8IGxlbmd0aCkge1xyXG4gICAgICBkYW1hZ2VzICs9IDE7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgY29uc3QgaXNTdW5jID0gKCkgPT4ge1xyXG4gICAgaWYgKGRhbWFnZXMgPT09IGxlbmd0aCkge1xyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9O1xyXG5cclxuICByZXR1cm4ge1xyXG4gICAgbGVuZ3RoLFxyXG4gICAgaGl0LFxyXG4gICAgaXNTdW5jLFxyXG4gIH07XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBTaGlwO1xyXG4iLCJpbXBvcnQgU2hpcCBmcm9tICcuL3NoaXAnO1xyXG5cclxuY29uc3QgR2FtZWJvYXJkID0gZnVuY3Rpb24gKCkge1xyXG4gIGxldCBmaWVsZCA9IHtcclxuICAgIEE6IFtdLFxyXG4gICAgQjogW10sXHJcbiAgICBDOiBbXSxcclxuICAgIEQ6IFtdLFxyXG4gICAgRTogW10sXHJcbiAgICBGOiBbXSxcclxuICAgIEc6IFtdLFxyXG4gICAgSDogW10sXHJcbiAgICBJOiBbXSxcclxuICAgIEo6IFtdLFxyXG4gIH07XHJcbiAgLy9LZWVwcyBhbGwgc2hpcHNcclxuICBjb25zdCBzaGlwQ29udGFpbmVyID0gW107XHJcbiAgY29uc3QgbWlzc2VkQXR0YWNrcyA9IFtdOyAvL0tlZXBzIGFsbCBtaXNzZWQgc2hvb3RzXHJcbiAgY29uc3QgaGl0cyA9IFtdOyAvL0FsbCBzdWNjZXNzZnVsbCBzaG9vdHNcclxuICAvL0FibnVsbGluZyBjZWxsc1xyXG4gIGZvciAobGV0IGtleSBpbiBmaWVsZCkge1xyXG4gICAgbGV0IGEgPSBudWxsO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XHJcbiAgICAgIGZpZWxkW2tleV0ucHVzaChhKTtcclxuICAgIH1cclxuICB9XHJcbiAgLy9TcGxpdHMgY29vcmRpbmF0ZSBmcm9tICdMZXR0ZXJEaWdpdCdcclxuICBjb25zdCBkZXRlY3RDb29yZGluYXRlcyA9IGZ1bmN0aW9uIChsZXR0ZXJEaWdpdCkge1xyXG4gICAgbGV0IHJlZyA9IC9eKFtBLUpdKShcXGQrKSQvO1xyXG4gICAgbGV0IHJlZ09iaiA9IGxldHRlckRpZ2l0Lm1hdGNoKHJlZyk7XHJcbiAgICBpZiAoIXJlZ09iaikge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBsZXQgbCA9IHJlZ09ialsxXTtcclxuICAgIGxldCBkID0gcmVnT2JqWzJdO1xyXG4gICAgZCA9IHBhcnNlSW50KGQsIDEwKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGxldHRlcjogbCxcclxuICAgICAgZGlnaXQ6IGQsXHJcbiAgICB9O1xyXG4gIH07XHJcbiAgLy9EaWZpbmVzIGlmIHNoaXAgY291bGQgYmUgZGlzcG9zZWQgYXQgY2VydGFpbiBwbGFjZVxyXG4gIGNvbnN0IGlzRW5vdWdoUGxhY2UgPSBmdW5jdGlvbiAoZnJvbUNvb3JkLCBsZW5ndGgsIGhvcmlzb250YWwgPSB0cnVlKSB7XHJcbiAgICBsZXQgY29vcmRpbmF0ZXMgPSBkZXRlY3RDb29yZGluYXRlcyhmcm9tQ29vcmQpO1xyXG4gICAgbGV0IGRpZmZlcmVuY2U7XHJcbiAgICBpZiAoaG9yaXNvbnRhbCkge1xyXG4gICAgICBkaWZmZXJlbmNlID0gJ0onLmNoYXJDb2RlQXQoMCkgLSBjb29yZGluYXRlcy5sZXR0ZXIuY2hhckNvZGVBdCgwKSArIDE7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBkaWZmZXJlbmNlID0gMTAgLSBjb29yZGluYXRlcy5kaWdpdCArIDE7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZGlmZmVyZW5jZSA+PSBsZW5ndGggPyB0cnVlIDogZmFsc2U7XHJcbiAgfTtcclxuICAvL0ZpbmRzIGlmIHRoZXJlIGlzIGEgc2hpcCB3aXRoIHN1Y2ggY29vcmRpbmF0ZVxyXG4gIGNvbnN0IGZpbmRTaGlwQ29vcmQgPSBmdW5jdGlvbiAobGV0dGVyRGlnaXQpIHtcclxuICAgIGxldCByZXMgPSBmYWxzZTtcclxuICAgIHNoaXBDb250YWluZXIuZm9yRWFjaCgoc2hpcCkgPT4ge1xyXG4gICAgICBpZiAoc2hpcC5jb29yZGluYXRlcykge1xyXG4gICAgICAgIGlmIChzaGlwLmNvb3JkaW5hdGVzLmluY2x1ZGVzKGxldHRlckRpZ2l0KSkge1xyXG4gICAgICAgICAgcmVzID0gc2hpcDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHJlcztcclxuICB9O1xyXG4gIC8vIEZpbmRzIHNoaXAgd2l0aCBwcm9wZXIgY29vcmRpbmF0ZVxyXG4gIGNvbnN0IGZpbmRTaGlwQnlDb29yZCA9IGZ1bmN0aW9uIChsZXR0ZXJEaWdpdCkge1xyXG4gICAgcmV0dXJuIHNoaXBDb250YWluZXIuZmluZCgoc2hpcCkgPT4ge1xyXG4gICAgICByZXR1cm4gc2hpcC5jb29yZGluYXRlcy5pbmNsdWRlcyhsZXR0ZXJEaWdpdCk7XHJcbiAgICB9KTtcclxuICB9O1xyXG4gIC8vIFJldHVybnMgY2xvc2VzdCBjb29yZGluYXRlcyB0byBjZXJ0YWluIG9uZVxyXG4gIGNvbnN0IGZpbmRGaWVsZHNUb1ZlcmlmeSA9IGZ1bmN0aW9uIChmcm9tQ29vcmQpIHtcclxuICAgIGxldCBjb29yZGluYXRlcyA9IGRldGVjdENvb3JkaW5hdGVzKGZyb21Db29yZCk7XHJcbiAgICBsZXQgbWF4Q2hhckNvZGUgPSAnSicuY2hhckNvZGVBdCgwKTtcclxuICAgIGxldCBtaW5DaGFyQ29kZSA9ICdBJy5jaGFyQ29kZUF0KDApO1xyXG4gICAgbGV0IGZpZWxkc0FycmF5ID0gW107XHJcbiAgICBsZXQgaW5pdExldHRlckNvZGUgPSBjb29yZGluYXRlcy5sZXR0ZXIuY2hhckNvZGVBdCgwKSAtIDE7XHJcbiAgICBsZXQgaW5pdERpZ2l0ID0gY29vcmRpbmF0ZXMuZGlnaXQgLSAxO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAzOyBpKyspIHtcclxuICAgICAgbGV0IGxldHRlckNvZGUgPSBpbml0TGV0dGVyQ29kZSArIGk7XHJcbiAgICAgIGlmIChsZXR0ZXJDb2RlID49IG1pbkNoYXJDb2RlICYmIGxldHRlckNvZGUgPD0gbWF4Q2hhckNvZGUpIHtcclxuICAgICAgICBmb3IgKGxldCBrID0gMDsgayA8IDM7IGsrKykge1xyXG4gICAgICAgICAgbGV0IGRpZ2l0ID0gaW5pdERpZ2l0ICsgaztcclxuICAgICAgICAgIGlmIChkaWdpdCA+PSAxICYmIGRpZ2l0IDw9IDEwKSB7XHJcbiAgICAgICAgICAgIGxldCBzdHIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGxldHRlckNvZGUpICsgZGlnaXQ7XHJcbiAgICAgICAgICAgIGZpZWxkc0FycmF5LnB1c2goc3RyKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBmaWVsZHNBcnJheTtcclxuICB9O1xyXG4gIC8vIGRldGVjdHMgaWYgdGhlcmUgaXMgYSBjbG9zZSBzaGlwIG5lYXIgb25lIGNlbGxcclxuICBjb25zdCBpc0Nsb3NlU2hpcCA9IGZ1bmN0aW9uIChsZXR0ZXJEaWdpdCkge1xyXG4gICAgbGV0IGZpZWxkc0FycmF5ID0gZmluZEZpZWxkc1RvVmVyaWZ5KGxldHRlckRpZ2l0KTtcclxuICAgIGxldCByZXMgPSBmYWxzZTtcclxuICAgIGZpZWxkc0FycmF5LmZvckVhY2goKGZpZWxkKSA9PiB7XHJcbiAgICAgIGlmIChmaW5kU2hpcENvb3JkKGZpZWxkKSkge1xyXG4gICAgICAgIHJlcyA9IHRydWU7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHJlcztcclxuICB9O1xyXG4gIC8vIGRldGVjdHMgaWYgdGhlcmUgaXMgYSBjbG9zZSBzaGlwIG5lYXIgYWxsIGNlbGxlcyBpbiBwYXJ0aWN1bGFyIHNoaXBcclxuICBjb25zdCBjaGVja0ZvckNsb3NlU2hpcHMgPSBmdW5jdGlvbiAoZnJvbUNvb3JkLCBsZW5ndGgsIGhvcmlzb250YWwgPSB0cnVlKSB7XHJcbiAgICBsZXQgY29vcmRPYmogPSBkZXRlY3RDb29yZGluYXRlcyhmcm9tQ29vcmQpO1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcclxuICAgICAgbGV0IHN0ciA9ICcnO1xyXG4gICAgICBpZiAoaG9yaXNvbnRhbCkge1xyXG4gICAgICAgIHN0ciA9XHJcbiAgICAgICAgICBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvb3JkT2JqLmxldHRlci5jaGFyQ29kZUF0KDApICsgaSkgK1xyXG4gICAgICAgICAgY29vcmRPYmouZGlnaXQ7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgc3RyID0gY29vcmRPYmoubGV0dGVyICsgKGNvb3JkT2JqLmRpZ2l0ICsgaSk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGlzQ2xvc2VTaGlwKHN0cikpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH07XHJcblxyXG4gIGNvbnN0IGNyZWF0ZVNoaXBDb29yZGluYXRlcyA9IGZ1bmN0aW9uIChcclxuICAgIGZyb21Db29yZCxcclxuICAgIGxlbmd0aCxcclxuICAgIGhvcmlzb250YWwgPSB0cnVlXHJcbiAgKSB7XHJcbiAgICBsZXQgY29vcmRpbmF0ZXMgPSBbZnJvbUNvb3JkXTtcclxuICAgIGxldCBjb29yZE9iaiA9IGRldGVjdENvb3JkaW5hdGVzKGZyb21Db29yZCk7XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCBsZW5ndGg7IGkrKykge1xyXG4gICAgICBsZXQgc3RyID0gJyc7XHJcbiAgICAgIGlmIChob3Jpc29udGFsKSB7XHJcbiAgICAgICAgc3RyID1cclxuICAgICAgICAgIFN0cmluZy5mcm9tQ2hhckNvZGUoY29vcmRPYmoubGV0dGVyLmNoYXJDb2RlQXQoMCkgKyBpKSArXHJcbiAgICAgICAgICBjb29yZE9iai5kaWdpdDtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBzdHIgPSBjb29yZE9iai5sZXR0ZXIgKyAoY29vcmRPYmouZGlnaXQgKyBpKTtcclxuICAgICAgfVxyXG4gICAgICBjb29yZGluYXRlcy5wdXNoKHN0cik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY29vcmRpbmF0ZXM7XHJcbiAgfTtcclxuXHJcbiAgY29uc3QgY3JlYXRlU2hpcCA9IGZ1bmN0aW9uIChsZW5ndGgpIHtcclxuICAgIGxldCBzaGlwID0gU2hpcChsZW5ndGgpO1xyXG4gICAgc2hpcENvbnRhaW5lci5wdXNoKHNoaXApO1xyXG4gICAgcmV0dXJuIHNoaXA7XHJcbiAgfTtcclxuXHJcbiAgY29uc3QgY3JlYXRlQWxsU2hpcHMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBmb3IgKGxldCBpID0gNDsgaSA+PSAxOyBpLS0pIHtcclxuICAgICAgZm9yIChsZXQgayA9IDE7IGsgPD0gNDsgaysrKSB7XHJcbiAgICAgICAgaWYgKGkgKyBrIDw9IDUpIHtcclxuICAgICAgICAgIGNyZWF0ZVNoaXAoaSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgY29uc3QgZ2V0UmFuZG9tRGF0YSA9IGZ1bmN0aW9uICgpIHtcclxuICAgIGxldCBkaXJlY3Rpb24gPSBNYXRoLmZsb29yKDIgKiBNYXRoLnJhbmRvbSgpKTtcclxuICAgIGxldCBsZXR0ZXIgPSAnQScuY2hhckNvZGVBdCgwKSArIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwKTtcclxuICAgIGxldCBkaWdpdCA9IDEgKyBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMCk7XHJcbiAgICBsZXQgZnJvbUNvb3JkID0gU3RyaW5nLmZyb21DaGFyQ29kZShsZXR0ZXIpICsgZGlnaXQ7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBmcm9tQ29vcmQsXHJcbiAgICAgIGRpcmVjdGlvbixcclxuICAgIH07XHJcbiAgfTtcclxuXHJcbiAgY29uc3QgcmVzZXRBbGxTaGlwQ29vcmRpbmF0ZXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBzaGlwQ29udGFpbmVyLmZvckVhY2goKHNoaXApID0+IHtcclxuICAgICAgc2hpcC5jb29yZGluYXRlcyA9IFtdO1xyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgY29uc3QgcmFuZG9tUGxhY2VTaGlwcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgIGlmICghc2hpcENvbnRhaW5lci5sZW5ndGgpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgcmVzZXRBbGxTaGlwQ29vcmRpbmF0ZXMoKTtcclxuICAgIHNoaXBDb250YWluZXIuc29ydCgoYSwgYikgPT4ge1xyXG4gICAgICByZXR1cm4gYi5sZW5ndGggLSBhLmxlbmd0aDtcclxuICAgIH0pO1xyXG4gICAgc2hpcENvbnRhaW5lci5mb3JFYWNoKChzaGlwKSA9PiB7XHJcbiAgICAgIGxldCByYW5kb21EYXRhO1xyXG4gICAgICBkbyB7XHJcbiAgICAgICAgcmFuZG9tRGF0YSA9IGdldFJhbmRvbURhdGEoKTtcclxuICAgICAgfSB3aGlsZSAoIXBsYWNlU2hpcChyYW5kb21EYXRhLmZyb21Db29yZCwgc2hpcCwgcmFuZG9tRGF0YS5kaXJlY3Rpb24pKTtcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIGNvbnN0IHBsYWNlU2hpcCA9IGZ1bmN0aW9uIChmcm9tQ29vcmQsIHNoaXAsIGhvcmlzb250YWwgPSB0cnVlKSB7XHJcbiAgICBpZiAoXHJcbiAgICAgICFpc0Vub3VnaFBsYWNlKGZyb21Db29yZCwgc2hpcC5sZW5ndGgsIGhvcmlzb250YWwpIHx8XHJcbiAgICAgIGNoZWNrRm9yQ2xvc2VTaGlwcyhmcm9tQ29vcmQsIHNoaXAubGVuZ3RoLCBob3Jpc29udGFsKVxyXG4gICAgKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgY29vcmRpbmF0ZXMgPSBjcmVhdGVTaGlwQ29vcmRpbmF0ZXMoZnJvbUNvb3JkLCBzaGlwLmxlbmd0aCwgaG9yaXNvbnRhbCk7XHJcbiAgICBzaGlwLmNvb3JkaW5hdGVzID0gY29vcmRpbmF0ZXM7XHJcbiAgICBzaGlwLmhvcmlzb250YWwgPSBob3Jpc29udGFsO1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfTtcclxuXHJcbiAgY29uc3QgaGl0QXR0YWNrID0gZnVuY3Rpb24gKGxldHRlckRpZ2l0KSB7XHJcbiAgICBsZXQgY29sID0gZGV0ZWN0Q29vcmRpbmF0ZXMobGV0dGVyRGlnaXQpLmxldHRlcjtcclxuICAgIGxldCByb3cgPSBkZXRlY3RDb29yZGluYXRlcyhsZXR0ZXJEaWdpdCkuZGlnaXQ7XHJcbiAgICBpZiAoZmllbGRbY29sXVtyb3cgLSAxXSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBsZXQgc2hpcCA9IGZpbmRTaGlwQnlDb29yZChsZXR0ZXJEaWdpdCk7XHJcbiAgICBpZiAoc2hpcCkge1xyXG4gICAgICBmaWVsZFtjb2xdW3JvdyAtIDFdID0gJ2hpdCc7XHJcbiAgICAgIGhpdHMucHVzaChsZXR0ZXJEaWdpdCk7XHJcbiAgICAgIHNoaXAuaGl0KCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBmaWVsZFtjb2xdW3JvdyAtIDFdID0gJ21pc3MnO1xyXG4gICAgICBtaXNzZWRBdHRhY2tzLnB1c2gobGV0dGVyRGlnaXQpO1xyXG4gICAgfVxyXG4gICAgaWYgKHNoaXAgJiYgc2hpcC5pc1N1bmMoKSkge1xyXG4gICAgICBhcm91bmRTdW5rU2hpcChzaGlwKTtcclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH07XHJcblxyXG4gIGNvbnN0IGhpdEFyb3VuZCA9IGZ1bmN0aW9uIChjb29yZCkge1xyXG4gICAgbGV0IGZpZWxkcyA9IGZpbmRGaWVsZHNUb1ZlcmlmeShjb29yZCk7XHJcbiAgICBmaWVsZHMuZm9yRWFjaCgoZWxlbSkgPT4ge1xyXG4gICAgICBsZXQgcm93ID0gZGV0ZWN0Q29vcmRpbmF0ZXMoZWxlbSkubGV0dGVyO1xyXG4gICAgICBsZXQgY29sID0gZGV0ZWN0Q29vcmRpbmF0ZXMoZWxlbSkuZGlnaXQ7XHJcbiAgICAgIGlmICghZmllbGRbcm93XVtjb2wgLSAxXSkge1xyXG4gICAgICAgIGZpZWxkW3Jvd11bY29sIC0gMV0gPSAnbWlzcyc7XHJcbiAgICAgICAgbWlzc2VkQXR0YWNrcy5wdXNoKGVsZW0pO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9O1xyXG4gIC8vIERlZmluZXMgYWxsIGZyZWUgY2VsbHMgYXJvdW5kIHBhcnRpY3VsYXIgc2hpcCBhcyBtaXNzZWQgYXR0YWNrc1xyXG4gIGNvbnN0IGFyb3VuZFN1bmtTaGlwID0gZnVuY3Rpb24gKHNoaXApIHtcclxuICAgIHNoaXAuY29vcmRpbmF0ZXMuZm9yRWFjaCgoY29vcmQpID0+IHtcclxuICAgICAgaGl0QXJvdW5kKGNvb3JkKTtcclxuICAgIH0pO1xyXG4gIH07XHJcbiAgLy9DaGVja3MgZm9yIGV2ZXJ5IHNoaXAgaXMgc3VuY1xyXG4gIGNvbnN0IGFsbFNoaXBzU3VuayA9IGZ1bmN0aW9uICgpIHtcclxuICAgIGxldCBudW0gPSBzaGlwQ29udGFpbmVyLnJlZHVjZSgocmVzLCBzaGlwKSA9PiB7XHJcbiAgICAgIHJldHVybiBzaGlwLmlzU3VuYygpID8gKHJlcyArPSAxKSA6IHJlcztcclxuICAgIH0sIDApO1xyXG4gICAgcmV0dXJuIG51bSA9PT0gc2hpcENvbnRhaW5lci5sZW5ndGg7IC8vID8gdHJ1ZSA6IGZhbHNlO1xyXG4gIH07XHJcblxyXG4gIGNvbnN0IGVyYXNlU2hpcENvb3JkaW5hdGVzID0gZnVuY3Rpb24gKHNoaXApIHtcclxuICAgIHNoaXAuY29vcmRpbmF0ZXMgPSBbXTtcclxuICB9O1xyXG5cclxuICBjb25zdCByb3RhdGVTaGlwID0gZnVuY3Rpb24gKHNoaXApIHtcclxuICAgIGxldCBzYWZlQ29vcmQgPSBzaGlwLmNvb3JkaW5hdGVzO1xyXG4gICAgZXJhc2VTaGlwQ29vcmRpbmF0ZXMoc2hpcCk7XHJcbiAgICBpZiAoIXBsYWNlU2hpcChzYWZlQ29vcmRbMF0sIHNoaXAsICFzaGlwLmhvcmlzb250YWwpKSB7XHJcbiAgICAgIHNoaXAuY29vcmRpbmF0ZXMgPSBzYWZlQ29vcmQ7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgY29uc3QgbW92ZVNoaXAgPSBmdW5jdGlvbiAoc2hpcCwgdG9Db29yZCkge1xyXG4gICAgbGV0IHNhZmVDb29yZCA9IHNoaXAuY29vcmRpbmF0ZXM7XHJcbiAgICBlcmFzZVNoaXBDb29yZGluYXRlcyhzaGlwKTtcclxuICAgIGlmICghcGxhY2VTaGlwKHRvQ29vcmQsIHNoaXAsIHNoaXAuaG9yaXNvbnRhbCkpIHtcclxuICAgICAgc2hpcC5jb29yZGluYXRlcyA9IHNhZmVDb29yZDtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBjb25zdCByb3RhdGVTaGlwQ29vcmQgPSBmdW5jdGlvbiAobGV0dGVyRGlnaXQpIHtcclxuICAgIGxldCBzaGlwID0gZmluZFNoaXBCeUNvb3JkKGxldHRlckRpZ2l0KTtcclxuICAgIHJvdGF0ZVNoaXAoc2hpcCk7XHJcbiAgfTtcclxuICAvL0dldCBpbmZvcm1hdGlvbiBhYm91dCBjb21tZXRlZCBzaG9vdFxyXG4gIGNvbnN0IGdldEluZm9TaG9vdCA9IGZ1bmN0aW9uIChjb29yZCkge1xyXG4gICAgbGV0IHN0ciA9ICcnO1xyXG4gICAgaWYgKG1pc3NlZEF0dGFja3MuaW5jbHVkZXMoY29vcmQpKSB7XHJcbiAgICAgIHN0ciA9ICdNaXNzZWQgc2hvdC4nO1xyXG4gICAgfVxyXG4gICAgaWYgKGhpdHMuaW5jbHVkZXMoY29vcmQpKSB7XHJcbiAgICAgIHN0ciA9ICdIaXQhISEgJztcclxuICAgICAgbGV0IHNoaXAgPSBmaW5kU2hpcEJ5Q29vcmQoY29vcmQpO1xyXG4gICAgICBpZiAoc2hpcC5pc1N1bmMoKSkge1xyXG4gICAgICAgIHN0ciArPSBgJHtzaGlwLmxlbmd0aH0tZGVjayBzaGlwIHN1bmshISFgO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHN0ciArPSBgU2hpcCB3YXMgZGFtYWdlZC5gO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gc3RyO1xyXG4gIH07XHJcbiAgLy8gZ2V0IGluZm9ybWF0aW9uIGFib3V0IGxlZnQgc2hpcHNcclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIGZpZWxkLFxyXG4gICAgc2hpcENvbnRhaW5lcixcclxuICAgIGhpdHMsXHJcbiAgICBtaXNzZWRBdHRhY2tzLFxyXG4gICAgZGV0ZWN0Q29vcmRpbmF0ZXMsXHJcbiAgICBpc0Vub3VnaFBsYWNlLFxyXG4gICAgY3JlYXRlU2hpcENvb3JkaW5hdGVzLFxyXG4gICAgcGxhY2VTaGlwLFxyXG4gICAgY3JlYXRlU2hpcCxcclxuICAgIGZpbmRTaGlwQ29vcmQsXHJcbiAgICBmaW5kRmllbGRzVG9WZXJpZnksXHJcbiAgICBpc0Nsb3NlU2hpcCxcclxuICAgIGNoZWNrRm9yQ2xvc2VTaGlwcyxcclxuICAgIGZpbmRTaGlwQnlDb29yZCxcclxuICAgIGhpdEF0dGFjayxcclxuICAgIGFsbFNoaXBzU3VuayxcclxuICAgIHJhbmRvbVBsYWNlU2hpcHMsXHJcbiAgICBjcmVhdGVBbGxTaGlwcyxcclxuICAgIHJvdGF0ZVNoaXAsXHJcbiAgICByb3RhdGVTaGlwQ29vcmQsXHJcbiAgICBtb3ZlU2hpcCxcclxuICAgIGdldEluZm9TaG9vdCxcclxuICB9O1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgR2FtZWJvYXJkO1xyXG4iLCJjb25zdCBQbGF5ZXIgPSBmdW5jdGlvbiAob3duR0IsIG9wcG9uZW50R0IsIGlzQ3B1KSB7XHJcbiAgLy9HZXR0aW5nIHJhbmRvbSBjb29yZGluYXRlc1xyXG4gIGNvbnN0IGdldFJhbmRvbUNvb3JkaW5hdGVzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgbGV0IGxldHRlciA9ICdBJy5jaGFyQ29kZUF0KDApICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTApO1xyXG4gICAgbGV0IGRpZ2l0ID0gMSArIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwKTtcclxuICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGxldHRlcikgKyBkaWdpdDtcclxuICB9O1xyXG4gIC8vY2hlY2sgaWYgbW92ZSBpcyBhdmFpbGFibGVcclxuICBjb25zdCBtb3ZlSXNBdmFpbGFibGUgPSBmdW5jdGlvbiAoY29vcmQpIHtcclxuICAgIGlmIChcclxuICAgICAgb3Bwb25lbnRHQi5oaXRzLmluY2x1ZGVzKGNvb3JkKSB8fFxyXG4gICAgICBvcHBvbmVudEdCLm1pc3NlZEF0dGFja3MuaW5jbHVkZXMoY29vcmQpXHJcbiAgICApIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfTtcclxuICAvL2ZpbmRpbmcgcHJvcGVyIHJhbmRvbSBtb3ZlXHJcbiAgY29uc3QgcmFuZG9tTW92ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgIGxldCBjb29yZDtcclxuICAgIGRvIHtcclxuICAgICAgY29vcmQgPSBnZXRSYW5kb21Db29yZGluYXRlcygpO1xyXG4gICAgfSB3aGlsZSAoIW1vdmVJc0F2YWlsYWJsZShjb29yZCkpO1xyXG4gICAgcmV0dXJuIGNvb3JkO1xyXG4gIH07XHJcbiAgLy9jb21wdXRlciBtb3ZlIGRlcGVuZHMgb24gaWYgdGhlcmUgaXMgYW4gb3Bwb25lbnQncyBpbmp1cmVkIHNoaXBcclxuICBjb25zdCBjcHVNb3ZlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgbGV0IGNvb3JkO1xyXG4gICAgLy9yYW5kb20gbW92ZSBpZiB0aGVyZSBpcyBub3QgaW5qdXJlZCBzaGlwXHJcbiAgICBpZiAoIWNwdUhpdHMubGVuZ3RoKSB7XHJcbiAgICAgIGNvb3JkID0gcmFuZG9tTW92ZSgpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29vcmQgPSBmaW5kQmVzdE1vdmUoKTsgLy9maW5kaW5nIGJlc3QgY29vcmRpbmF0ZXMgZm9yIG1vdmVcclxuICAgIH1cclxuICAgIC8vZGVsYXllZCByZXNvbHZlZCBmb3Igc2ltdWxhdGluZyBjb21wdXRlcidzIHJlZmxlY3RpbmdcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xyXG4gICAgICBvcHBvbmVudEdCLmhpdEF0dGFjayhjb29yZCk7XHJcbiAgICAgIGFuYWx5c2VQcmV2aW91c01vdmUoY29vcmQsIG9wcG9uZW50R0IpO1xyXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHJlc29sdmUoY29vcmQpLCA1MDApO1xyXG4gICAgfSk7XHJcbiAgfTtcclxuICAvL0FuYWx5c2luZyBhbGwgbW92ZSBvcHRpb25zXHJcbiAgY29uc3Qgd2VpZ2hBbGxPcHRpb25zID0gZnVuY3Rpb24gKCkge1xyXG4gICAgY3B1SGl0cy5mb3JFYWNoKChtZW0pID0+IG1lbS53ZWlnaE9wdGlvbnMob3Bwb25lbnRHQikpO1xyXG4gIH07XHJcbiAgLy9maW5kaW5nIHRoZSBvcHRpb24gZm9yIG1vdmUgd2l0aCB0aGUgaGlnaGVzdCB2YWx1ZVxyXG4gIGNvbnN0IGZpbmRCZXN0TW92ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHdlaWdoQWxsT3B0aW9ucygpO1xyXG4gICAgbGV0IG1vdmVzID0gY3B1SGl0cy5tYXAoKGVsZW0pID0+IHtcclxuICAgICAgcmV0dXJuIGVsZW0uZ2V0TWF4KCk7XHJcbiAgICB9KTtcclxuICAgIGxldCBtYXhXZWlnaHQgPSAtMjAwO1xyXG4gICAgbGV0IGJlc3RNb3ZlID0gJyc7XHJcbiAgICBtb3Zlcy5mb3JFYWNoKChlbGVtKSA9PiB7XHJcbiAgICAgIGlmIChlbGVtICYmIGVsZW0ud2VpZ2h0ID4gbWF4V2VpZ2h0KSB7XHJcbiAgICAgICAgbWF4V2VpZ2h0ID0gZWxlbS53ZWlnaHQ7XHJcbiAgICAgICAgYmVzdE1vdmUgPSBlbGVtLmNvb3JkO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBiZXN0TW92ZTtcclxuICB9O1xyXG4gIC8vcG9zdCBhbmFseXN5bmcgZGVwZW5kcyBvbiBpZiBwcnZpb3VzIG1vdmUgbWFkZSBzaGlwIHN1bmNcclxuICBjb25zdCBhbmFseXNlUHJldmlvdXNNb3ZlID0gZnVuY3Rpb24gKGNvb3JkLCBvcHBvbmVudEdCKSB7XHJcbiAgICBpZiAoXHJcbiAgICAgIG9wcG9uZW50R0IuaGl0cy5pbmNsdWRlcyhjb29yZCkgJiZcclxuICAgICAgIW9wcG9uZW50R0IuZmluZFNoaXBCeUNvb3JkKGNvb3JkKS5pc1N1bmMoKVxyXG4gICAgKSB7XHJcbiAgICAgIGxldCBtZW1vcnlIaXQgPSBuZXcgY3B1TWVtb3J5KGNvb3JkKTtcclxuICAgICAgbWVtb3J5SGl0LmdldENvb3Jkc0ZvckF0dGFjayhvcHBvbmVudEdCKTtcclxuICAgICAgY3B1SGl0cy5wdXNoKG1lbW9yeUhpdCk7XHJcbiAgICB9IGVsc2UgaWYgKFxyXG4gICAgICBvcHBvbmVudEdCLmhpdHMuaW5jbHVkZXMoY29vcmQpICYmXHJcbiAgICAgIG9wcG9uZW50R0IuZmluZFNoaXBCeUNvb3JkKGNvb3JkKS5pc1N1bmMoKVxyXG4gICAgKSB7XHJcbiAgICAgIGNwdUhpdHMgPSBbXTtcclxuICAgIH1cclxuICB9O1xyXG4gIC8vb2JqZWN0IHRoYXQga2VlcHMgcHJldmlvdXMgc3VjY2Vzc2Z1bCBjb29yZGluYXRlcyBvZiBpbmp1cmVkIHNoaXBcclxuICAvLyBldmVyeSBvYmplY3QgaXMga2VwdCBpbiBhcnJheSB1bnRpbCBzaGlwIGlzIG5vdCBzdW5jXHJcbiAgY2xhc3MgY3B1TWVtb3J5IHtcclxuICAgIGNvbnN0cnVjdG9yKGhpdCkge1xyXG4gICAgICAodGhpcy5oaXQgPSBoaXQpLFxyXG4gICAgICAgICh0aGlzLmxlZnQgPSB7XHJcbiAgICAgICAgICBjb29yZDogbnVsbCxcclxuICAgICAgICAgIHdlaWdodDogMCxcclxuICAgICAgICB9KSxcclxuICAgICAgICAodGhpcy5yaWdodCA9IHtcclxuICAgICAgICAgIGNvb3JkOiBudWxsLFxyXG4gICAgICAgICAgd2VpZ2h0OiAwLFxyXG4gICAgICAgIH0pLFxyXG4gICAgICAgICh0aGlzLnRvcCA9IHtcclxuICAgICAgICAgIGNvb3JkOiBudWxsLFxyXG4gICAgICAgICAgd2VpZ2h0OiAwLFxyXG4gICAgICAgIH0pLFxyXG4gICAgICAgICh0aGlzLmJvdHRvbSA9IHtcclxuICAgICAgICAgIGNvb3JkOiBudWxsLFxyXG4gICAgICAgICAgd2VpZ2h0OiAwLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgLy8gaW5pdCBuZWlnaGJvdXIgbGluZSBjb29yZGluYXRlc1xyXG4gICAgZ2V0Q29vcmRzRm9yQXR0YWNrKGdiKSB7XHJcbiAgICAgIGxldCBjb29yZE9iaiA9IGdiLmRldGVjdENvb3JkaW5hdGVzKHRoaXMuaGl0KTtcclxuICAgICAgbGV0IG1pbkNoYXJDb2RlID0gJ0EnLmNoYXJDb2RlQXQoMCk7XHJcbiAgICAgIGxldCBtYXhDaGFyQ29kZSA9ICdKJy5jaGFyQ29kZUF0KDApO1xyXG4gICAgICBsZXQgcm93ID0gW107XHJcbiAgICAgIHJvdy5wdXNoKGNvb3JkT2JqLmxldHRlci5jaGFyQ29kZUF0KDApIC0gMSk7XHJcbiAgICAgIHJvdy5wdXNoKGNvb3JkT2JqLmxldHRlci5jaGFyQ29kZUF0KDApICsgMSk7XHJcbiAgICAgIGlmIChyb3dbMF0gPj0gbWluQ2hhckNvZGUgJiYgcm93WzBdIDw9IG1heENoYXJDb2RlKSB7XHJcbiAgICAgICAgdGhpcy5sZWZ0LmNvb3JkID0gU3RyaW5nLmZyb21DaGFyQ29kZShyb3dbMF0pICsgY29vcmRPYmouZGlnaXQ7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKHJvd1sxXSA+PSBtaW5DaGFyQ29kZSAmJiByb3dbMV0gPD0gbWF4Q2hhckNvZGUpIHtcclxuICAgICAgICB0aGlzLnJpZ2h0LmNvb3JkID0gU3RyaW5nLmZyb21DaGFyQ29kZShyb3dbMV0pICsgY29vcmRPYmouZGlnaXQ7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGxldCBjb2wgPSBbXTtcclxuICAgICAgY29sLnB1c2goY29vcmRPYmouZGlnaXQgLSAxKTtcclxuICAgICAgY29sLnB1c2goY29vcmRPYmouZGlnaXQgKyAxKTtcclxuICAgICAgaWYgKGNvbFswXSA+PSAxICYmIGNvbFswXSA8PSAxMCkge1xyXG4gICAgICAgIHRoaXMudG9wLmNvb3JkID0gY29vcmRPYmoubGV0dGVyICsgY29sWzBdO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChjb2xbMV0gPj0gMSAmJiBjb2xbMV0gPD0gMTApIHtcclxuICAgICAgICB0aGlzLmJvdHRvbS5jb29yZCA9IGNvb3JkT2JqLmxldHRlciArIGNvbFsxXTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gZXZhbHVhdGluZyBlYWNoIG5laWdoYm91ciBjb29yZGluYXRlXHJcbiAgICB3ZWlnaE9wdGlvbnMoZ2IpIHtcclxuICAgICAgLy9pZiBmaWVsZCBoYXMgaGl0IG9yIG1pc3NlZCBzaG9vdCB2YWx1ZSBpcyB0aGUgbG93ZXN0XHJcbiAgICAgIGZvciAobGV0IGtleSBpbiB0aGlzKSB7XHJcbiAgICAgICAgaWYgKFxyXG4gICAgICAgICAgdGhpc1trZXldLmNvb3JkICYmXHJcbiAgICAgICAgICAoZ2IubWlzc2VkQXR0YWNrcy5pbmNsdWRlcyh0aGlzW2tleV0uY29vcmQpIHx8XHJcbiAgICAgICAgICAgIGdiLmhpdHMuaW5jbHVkZXModGhpc1trZXldLmNvb3JkKSlcclxuICAgICAgICApIHtcclxuICAgICAgICAgIHRoaXNba2V5XS53ZWlnaHQgPSAtMTAwO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICAvLyBvcHBvc2l0ZSB0byBoaXR0ZWQgY29vcmRpbmF0ZSBoYXMgKzEwMCB2YWx1ZVxyXG4gICAgICAvLyBvcHBvc2l0ZSB0byBtaXNzZWQgY29vcmRpbmF0ZSBoYXMgKzUwIHZhbHVlXHJcbiAgICAgIGZvciAobGV0IGtleSBpbiB0aGlzKSB7XHJcbiAgICAgICAgaWYgKHRoaXNba2V5XS53ZWlnaHQgPT09IC0xMDApIHtcclxuICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAga2V5ID09PSAnbGVmdCcgJiZcclxuICAgICAgICAgICAgdGhpcy5yaWdodC5jb29yZCAhPT0gbnVsbCAmJlxyXG4gICAgICAgICAgICAhdGhpcy5yaWdodC53ZWlnaHRcclxuICAgICAgICAgICkge1xyXG4gICAgICAgICAgICB0aGlzLnJpZ2h0LndlaWdodCArPSBnYi5oaXRzLmluY2x1ZGVzKHRoaXNba2V5XS5jb29yZCkgPyAxMDAgOiA1MDtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAga2V5ID09PSAncmlnaHQnICYmXHJcbiAgICAgICAgICAgIHRoaXMubGVmdC5jb29yZCAhPT0gbnVsbCAmJlxyXG4gICAgICAgICAgICAhdGhpcy5sZWZ0LndlaWdodFxyXG4gICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHRoaXMubGVmdC53ZWlnaHQgKz0gZ2IuaGl0cy5pbmNsdWRlcyh0aGlzW2tleV0uY29vcmQpID8gMTAwIDogNTA7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgIGtleSA9PT0gJ3RvcCcgJiZcclxuICAgICAgICAgICAgdGhpcy5ib3R0b20uY29vcmQgIT09IG51bGwgJiZcclxuICAgICAgICAgICAgIXRoaXMuYm90dG9tLndlaWdodFxyXG4gICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYm90dG9tLndlaWdodCArPSBnYi5oaXRzLmluY2x1ZGVzKHRoaXNba2V5XS5jb29yZCkgPyAxMDAgOiA1MDtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmIChrZXkgPT09ICdib3R0b20nICYmIHRoaXMudG9wLmNvb3JkICE9PSBudWxsICYmICF0aGlzLnRvcC53ZWlnaHQpIHtcclxuICAgICAgICAgICAgdGhpcy50b3Aud2VpZ2h0ICs9IGdiLmhpdHMuaW5jbHVkZXModGhpc1trZXldLmNvb3JkKSA/IDEwMCA6IDUwO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy9yZXR1cm4gb2JqZWN0IHdpdGggbWF4IHdlaWdodFxyXG4gICAgZ2V0TWF4KCkge1xyXG4gICAgICBsZXQgbWF4V2VpZ2h0ID0gLTEwMDA7XHJcbiAgICAgIGxldCByZXNPYmogPSBudWxsO1xyXG4gICAgICBmb3IgKGxldCBrZXkgaW4gdGhpcykge1xyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgIHRoaXNba2V5XS5jb29yZCAmJlxyXG4gICAgICAgICAgdGhpc1trZXldLndlaWdodCA+IG1heFdlaWdodCAmJlxyXG4gICAgICAgICAgdGhpc1trZXldLndlaWdodCA+PSAwXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICBtYXhXZWlnaHQgPSB0aGlzW2tleV0ud2VpZ2h0O1xyXG4gICAgICAgICAgcmVzT2JqID0gdGhpc1trZXldO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gcmVzT2JqO1xyXG4gICAgfVxyXG4gIH1cclxuICAvL2tlZXBzIGFsbCBjcHUgc3VjY2Vzc2Z1bGwgaGl0cyB1bnRpbCBzaGlwIGlzIG5vbiBzdW5jXHJcbiAgbGV0IGNwdUhpdHMgPSBbXTtcclxuXHJcbiAgY29uc3QgcGxheWVyTW92ZSA9IGZ1bmN0aW9uIChjb29yZCkge1xyXG4gICAgb3Bwb25lbnRHQi5oaXRBdHRhY2soY29vcmQpO1xyXG4gIH07XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBvd25HQixcclxuICAgIG9wcG9uZW50R0IsXHJcbiAgICBpc0NwdSxcclxuICAgIGNwdU1lbW9yeSxcclxuICAgIG1vdmVJc0F2YWlsYWJsZSxcclxuICAgIGNwdU1vdmUsXHJcbiAgICBwbGF5ZXJNb3ZlLFxyXG4gICAgZ2V0UmFuZG9tQ29vcmRpbmF0ZXMsXHJcbiAgICBmaW5kQmVzdE1vdmUsXHJcbiAgICBjcHVIaXRzLFxyXG4gIH07XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBQbGF5ZXI7XHJcbiIsIi8vIGltcG9ydCBHYW1lYm9hcmQgZnJvbSAnLi9nYW1lYm9hcmQnO1xyXG5pbXBvcnQgcmFuZG9tSWNvbiBmcm9tICcuLi9zcmMvaWNvbnMvaWNvbnM4LXNodWZmbGUtMjQucG5nJztcclxuaW1wb3J0IHNob3J0Y3V0SWNvbiBmcm9tICcuLi9zcmMvaWNvbnMvaWNvbnM4LWFjY3VyYWN5LTIwLnBuZyc7XHJcblxyXG5jb25zdCBEaXNwbGF5ID0gKGZ1bmN0aW9uICgpIHtcclxuICBsZXQgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpbmsnKTtcclxuICBsaW5rLnJlbCA9ICdzaG9ydGN1dCBpY29uJztcclxuICBsaW5rLnR5cGUgPSAnaW1hZ2UveC1pY29uJztcclxuICBsaW5rLmhyZWYgPSBzaG9ydGN1dEljb247XHJcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXS5hcHBlbmRDaGlsZChsaW5rKTtcclxuXHJcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYm9keScpLmlubmVySFRNTCA9IGBcclxuICAgICAgICA8aGVhZGVyPlxyXG4gICAgICAgICAgPGRpdiBjbGFzcz1cImxvZ29cIj48L2Rpdj5cclxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJzdGF0dXNcIj48L2Rpdj5cclxuICAgICAgICA8L2hlYWRlcj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29udGVudFwiPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZmllbGRcIj48L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZpZWxkXCI+PC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb250cm9sbGVyc1wiPlxyXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpbmZvXCI+XHJcbiAgICAgICAgICAgICAgICA8cCA+WW91ciBmaWVsZDwvcD5cclxuICAgICAgICAgICAgICAgIDxhIGlkPVwicmFuZG9taXNlXCIgaHJlZj1cIiNcIj5yYW5kb21pc2Ugc2hpcHM8aW1nIGlkPVwicmFuZEltZ1wiPjwvYT5cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaW5mb1wiPlxyXG4gICAgICAgICAgICAgICAgPHA+RW5lbXkgZmllbGQ8L3A+XHJcbiAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDxmb290ZXI+XHJcbiAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBpZD1cInN0YXJ0XCIgc3RhdHVzPVwiaW5pdFwiPlN0YXJ0IHRoZSBiYXR0bGUhXHJcbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPGRpdiBjbGFzcz1cImF1dGhvclwiPkNyZWF0ZWQgYnkgYWFiZWxpa29mZiAmIzE3NDs8L2Rpdj5cclxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJub3Rlc1wiPiYjOTc1NTtcclxuICAgICAgICAgICAgPGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImh0dHBzOi8vaWNvbnM4LmNvbS9pY29uL3dGRWRDd0twT0JIcy9iYXR0bGVcIj5CYXR0bGU8L2E+IGljb24gYnkgPGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImh0dHBzOi8vaWNvbnM4LmNvbVwiPkljb25zODwvYT5cclxuICAgICAgICAgICAgJiM5NzU1O1xyXG4gICAgICAgICAgICA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cHM6Ly9pY29uczguY29tL2ljb24vcnhyWTBzYkg4SWdIL3NodWZmbGVcIj5TaHVmZmxlPC9hPiBpY29uIGJ5IDxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwczovL2ljb25zOC5jb21cIj5JY29uczg8L2E+XHJcbiAgICAgICAgICAgICYjOTc1NTtcclxuICAgICAgICAgICAgPGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImh0dHBzOi8vaWNvbnM4LmNvbS9pY29uLzI0OTIxL2FjY3VyYWN5XCI+QWNjdXJhY3k8L2E+IGljb24gYnkgPGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImh0dHBzOi8vaWNvbnM4LmNvbVwiPkljb25zODwvYT5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZm9vdGVyPlxyXG4gIGA7XHJcblxyXG4gIGNvbnN0IGNyZWF0ZUNlbGwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBsZXQgY2VsbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgY2VsbC5jbGFzc0xpc3QuYWRkKCdjZWxsJyk7XHJcbiAgICByZXR1cm4gY2VsbDtcclxuICB9O1xyXG4gIC8vIENyZWF0ZXMgYSBmaWVsZCBvZiBjZWxscyAxMXgxMVxyXG4gIGNvbnN0IGlucHV0Q2VsbHMgPSBmdW5jdGlvbiAocGFyZW50Tm9kZSkge1xyXG4gICAgbGV0IGluaXRDb2RlID0gJ0EnLmNoYXJDb2RlQXQoMCkgLSAxO1xyXG4gICAgbGV0IGNoYXI7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDExOyBpKyspIHtcclxuICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCAxMTsgaysrKSB7XHJcbiAgICAgICAgbGV0IGNlbGwgPSBjcmVhdGVDZWxsKCk7XHJcbiAgICAgICAgY2hhciA9IFN0cmluZy5mcm9tQ2hhckNvZGUoaW5pdENvZGUgKyBrKTtcclxuICAgICAgICBpZiAoIWkgJiYgIWspIHtcclxuICAgICAgICAgIGNlbGwuY2xhc3NMaXN0LmFkZCgnbmFtZScpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoIWkgfHwgIWspIHtcclxuICAgICAgICAgIGNlbGwuY2xhc3NMaXN0LmFkZCgnbmFtZScpOyAvL2ZvciBkZXRlY3RpbmcgY29vcmRpbmF0ZXNcclxuICAgICAgICAgIGlmICghaSkge1xyXG4gICAgICAgICAgICBjZWxsLnRleHRDb250ZW50ID0gY2hhcjtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmICghaykge1xyXG4gICAgICAgICAgICBjZWxsLnRleHRDb250ZW50ID0gaTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgY2VsbC5jbGFzc0xpc3QuYWRkKCdzaW1wbGUnKTsgLy9mb3Igc2hpcHNcclxuICAgICAgICAgIGNlbGwuc2V0QXR0cmlidXRlKCdjb29yZCcsIGNoYXIgKyBpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcGFyZW50Tm9kZS5hcHBlbmRDaGlsZChjZWxsKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH07XHJcbiAgLy9Db25zdGFudHNcclxuICBjb25zdCBsZWZ0RmllbGQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuZmllbGQnKVswXTsgLy9wbGF5ZXIgZmllbGRcclxuICBjb25zdCByaWdodEZpZWxkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmZpZWxkJylbMV07IC8vY3B1IGZpZWxkXHJcbiAgY29uc3Qgc3RhcnRCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc3RhcnQnKTtcclxuICBjb25zdCBzdGF0dXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc3RhdHVzJyk7IC8vaW5mb3JtYXRpb24gYWJvdXQgZ2FtZSBzdGF0dXNcclxuICBjb25zdCByYW5kb21pc2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcmFuZG9taXNlJyk7XHJcbiAgY29uc3QgcmFuZEltZyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNyYW5kSW1nJyk7XHJcblxyXG4gIHJhbmRJbWcuc3JjID0gcmFuZG9tSWNvbjtcclxuXHJcbiAgaW5wdXRDZWxscyhsZWZ0RmllbGQpO1xyXG4gIGlucHV0Q2VsbHMocmlnaHRGaWVsZCk7XHJcbiAgLy9PbmUgYnV0dG9uIGZvciBnYW1lIHN0YXJ0aW5nIGFuZCBzaGlwIHBsYWNpbmcgc3RhZ2VzXHJcbiAgY29uc3QgdG9nZ2xlQnV0dG9ucyA9IGZ1bmN0aW9uICgpIHtcclxuICAgIGlmIChzdGFydEJ0bi5nZXRBdHRyaWJ1dGUoJ3N0YXR1cycpID09PSAnc3RhcnQnKSB7XHJcbiAgICAgIHN0YXJ0QnRuLnRleHRDb250ZW50ID0gJ1BsYWNlIHNoaXBzJztcclxuICAgICAgc3RhcnRCdG4uc2V0QXR0cmlidXRlKCdzdGF0dXMnLCAnaW5pdCcpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgc3RhcnRCdG4udGV4dENvbnRlbnQgPSAnU3RhcnQgdGhlIGJhdHRsZSEnO1xyXG4gICAgICBzdGFydEJ0bi5zZXRBdHRyaWJ1dGUoJ3N0YXR1cycsICdzdGFydCcpO1xyXG4gICAgfVxyXG4gIH07XHJcbiAgLy9Td2l0Y2hlcyBvbiBhbmQgb2ZmIGluYWN0aXZlIHN0YXRlIG9mIHRoZSBidXR0b25cclxuICBjb25zdCB0b2dnbGVJbmFjdGl2ZUJ1dHRvbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgIGlmIChzdGFydEJ0bi5jbGFzc0xpc3QuY29udGFpbnMoJ2luYWN0aXZlJykpIHtcclxuICAgICAgc3RhcnRCdG4uY2xhc3NMaXN0LnJlbW92ZSgnaW5hY3RpdmUnKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHN0YXJ0QnRuLmNsYXNzTGlzdC5hZGQoJ2luYWN0aXZlJyk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgY29uc3QgZmluZENlbGxCeUNvb3JkID0gZnVuY3Rpb24gKGZpZWxkLCBsZXR0ZXJEaWdpdCkge1xyXG4gICAgbGV0IGNlbGxBcnJheSA9IEFycmF5LmZyb20oZmllbGQuY2hpbGROb2Rlcyk7XHJcbiAgICByZXR1cm4gY2VsbEFycmF5LmZpbmQoKGNlbGwpID0+IGNlbGwuZ2V0QXR0cmlidXRlKCdjb29yZCcpID09PSBsZXR0ZXJEaWdpdCk7XHJcbiAgfTtcclxuXHJcbiAgY29uc3QgZHJhd1NoaXBzID0gZnVuY3Rpb24gKGZpZWxkLCBnYikge1xyXG4gICAgZ2Iuc2hpcENvbnRhaW5lci5mb3JFYWNoKChzaGlwKSA9PiB7XHJcbiAgICAgIHNoaXAuY29vcmRpbmF0ZXMuZm9yRWFjaCgoY29vcmQpID0+IHtcclxuICAgICAgICBmaW5kQ2VsbEJ5Q29vcmQoZmllbGQsIGNvb3JkKS5jbGFzc0xpc3QuYWRkKCdteVNoaXAnKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICBjb25zdCBkcmF3U2hvb3QgPSBmdW5jdGlvbiAoZmllbGQsIGdiKSB7XHJcbiAgICBnYi5oaXRzLmZvckVhY2goKGNvb3JkKSA9PiB7XHJcbiAgICAgIGxldCBjZWxsID0gZmluZENlbGxCeUNvb3JkKGZpZWxkLCBjb29yZCk7XHJcbiAgICAgIGNlbGwuY2xhc3NMaXN0LmFkZCgnaGl0Jyk7XHJcbiAgICAgIGlmIChmaWVsZCA9PT0gcmlnaHRGaWVsZCkge1xyXG4gICAgICAgIGNlbGwuY2xhc3NMaXN0LmFkZCgnZW5lbXlTaGlwJyk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgZ2IubWlzc2VkQXR0YWNrcy5mb3JFYWNoKChjb29yZCkgPT4ge1xyXG4gICAgICBmaW5kQ2VsbEJ5Q29vcmQoZmllbGQsIGNvb3JkKS5jbGFzc0xpc3QuYWRkKCdtaXNzJyk7XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICBjb25zdCBlcmFzZUZpZWxkID0gZnVuY3Rpb24gKGZpZWxkKSB7XHJcbiAgICBsZXQgY2VsbEFycmF5ID0gZmllbGQucXVlcnlTZWxlY3RvckFsbCgnLnNpbXBsZScpO1xyXG4gICAgY2VsbEFycmF5LmZvckVhY2goKGNlbGwpID0+IHtcclxuICAgICAgaWYgKGNlbGwuY2xhc3NMaXN0LmNvbnRhaW5zKCdoaXQnKSkge1xyXG4gICAgICAgIGNlbGwuY2xhc3NMaXN0LnJlbW92ZSgnaGl0Jyk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGNlbGwuY2xhc3NMaXN0LmNvbnRhaW5zKCdtaXNzJykpIHtcclxuICAgICAgICBjZWxsLmNsYXNzTGlzdC5yZW1vdmUoJ21pc3MnKTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoY2VsbC5jbGFzc0xpc3QuY29udGFpbnMoJ215U2hpcCcpKSB7XHJcbiAgICAgICAgY2VsbC5jbGFzc0xpc3QucmVtb3ZlKCdteVNoaXAnKTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoY2VsbC5jbGFzc0xpc3QuY29udGFpbnMoJ2VuZW15U2hpcCcpKSB7XHJcbiAgICAgICAgY2VsbC5jbGFzc0xpc3QucmVtb3ZlKCdlbmVteVNoaXAnKTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoY2VsbC5jbGFzc0xpc3QuY29udGFpbnMoJ21vdmluZycpKSB7XHJcbiAgICAgICAgY2VsbC5jbGFzc0xpc3QucmVtb3ZlKCdtb3ZpbmcnKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgY29uc3QgZXJhc2VGaWVsZHMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBlcmFzZUZpZWxkKGxlZnRGaWVsZCk7XHJcbiAgICBlcmFzZUZpZWxkKHJpZ2h0RmllbGQpO1xyXG4gIH07XHJcblxyXG4gIGNvbnN0IGRlbGF5ID0gZnVuY3Rpb24gKG1zKSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgbXMpKTtcclxuICB9O1xyXG4gIC8vIEVmZmVjdCBvZiB0eXBpbmcgaW4gc3RhdHVzLWJhclxyXG4gIGNvbnN0IHNldFN0YXR1cyA9IGFzeW5jIGZ1bmN0aW9uIChzdHIpIHtcclxuICAgIHN0YXR1cy50ZXh0Q29udGVudCA9ICcnO1xyXG4gICAgbGV0IGNoYXJzID0gc3RyLnNwbGl0KCcnKTtcclxuICAgIGZvciAoY29uc3QgaXRlbSBpbiBjaGFycykge1xyXG4gICAgICBhd2FpdCBkZWxheSgzMCk7XHJcbiAgICAgIHN0YXR1cy50ZXh0Q29udGVudCArPSBjaGFyc1tpdGVtXTtcclxuICAgIH1cclxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcclxuICB9O1xyXG5cclxuICByZXR1cm4ge1xyXG4gICAgbGVmdEZpZWxkLFxyXG4gICAgcmlnaHRGaWVsZCxcclxuICAgIHN0YXJ0QnRuLFxyXG4gICAgc3RhdHVzLFxyXG4gICAgcmFuZG9taXNlLFxyXG4gICAgZHJhd1NoaXBzLFxyXG4gICAgZmluZENlbGxCeUNvb3JkLFxyXG4gICAgZHJhd1Nob290LFxyXG4gICAgZXJhc2VGaWVsZCxcclxuICAgIGVyYXNlRmllbGRzLFxyXG4gICAgc2V0U3RhdHVzLFxyXG4gICAgdG9nZ2xlQnV0dG9ucyxcclxuICAgIHRvZ2dsZUluYWN0aXZlQnV0dG9uLFxyXG4gIH07XHJcbn0pKCk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBEaXNwbGF5O1xyXG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgR2FtZSBmcm9tICcuL2dhbWUnO1xyXG5pbXBvcnQgJy4vc3R5bGVzL3N0eWxlLmNzcyc7XHJcbmltcG9ydCBFdmVudHMgZnJvbSAnLi9ldmVudHMnO1xyXG5cclxubGV0IGcgPSBuZXcgR2FtZSgpO1xyXG5nLmluaXRHYW1lKCk7XHJcbkV2ZW50cyhnKTtcclxuIiwiaW1wb3J0IEdhbWVib2FyZCBmcm9tICcuL2dhbWVib2FyZCc7XHJcbmltcG9ydCBQbGF5ZXIgZnJvbSAnLi9wbGF5ZXInO1xyXG5pbXBvcnQgRGlzcGxheSBmcm9tICcuL2Rpc3BsYXknO1xyXG5cclxuY2xhc3MgR2FtZSB7XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLmNwdUdCO1xyXG4gICAgdGhpcy5odW1hbkdCO1xyXG4gICAgdGhpcy5odW1hbjtcclxuICAgIHRoaXMuY3B1O1xyXG4gICAgdGhpcy5jcHVNb3ZlO1xyXG4gICAgdGhpcy5nYW1lU3RhdHVzO1xyXG4gIH1cclxuXHJcbiAgbmV3R2FtZSgpIHtcclxuICAgIHRoaXMuZ2FtZVN0YXR1cyA9IGZhbHNlO1xyXG4gICAgdGhpcy5jcHVHQiA9IEdhbWVib2FyZCgpO1xyXG4gICAgdGhpcy5odW1hbkdCID0gR2FtZWJvYXJkKCk7XHJcbiAgICB0aGlzLmh1bWFuID0gUGxheWVyKHRoaXMuaHVtYW5HQiwgdGhpcy5jcHVHQiwgZmFsc2UpO1xyXG4gICAgdGhpcy5jcHUgPSBQbGF5ZXIodGhpcy5jcHVHQiwgdGhpcy5odW1hbkdCLCB0cnVlKTtcclxuICAgIHRoaXMuY3B1TW92ZSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDIpO1xyXG4gICAgdGhpcy5jcHVHQi5jcmVhdGVBbGxTaGlwcygpO1xyXG4gICAgdGhpcy5odW1hbkdCLmNyZWF0ZUFsbFNoaXBzKCk7XHJcbiAgfVxyXG5cclxuICBjaGVja0dhbWVTdGF0dXMoKSB7XHJcbiAgICBpZiAodGhpcy5jcHVHQi5hbGxTaGlwc1N1bmsoKSB8fCB0aGlzLmh1bWFuR0IuYWxsU2hpcHNTdW5rKCkpIHtcclxuICAgICAgdGhpcy5nYW1lU3RhdHVzID0gZmFsc2U7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcy5nYW1lU3RhdHVzO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgZ2FtZVN0ZXAoY29vcmQpIHtcclxuICAgIGxldCBzdHIgPSAnJztcclxuICAgIGlmICh0aGlzLmdhbWVTdGF0dXMgJiYgIXRoaXMuY3B1TW92ZSkge1xyXG4gICAgICB0aGlzLmNwdU1vdmUgPSB0cnVlO1xyXG4gICAgICB0aGlzLmh1bWFuLnBsYXllck1vdmUoY29vcmQpO1xyXG4gICAgICBzdHIgPSAnWW91ciBzaG90OiAnICsgY29vcmQgKyAnLiAnICsgdGhpcy5jcHVHQi5nZXRJbmZvU2hvb3QoY29vcmQpO1xyXG4gICAgICBEaXNwbGF5LmRyYXdTaG9vdChEaXNwbGF5LnJpZ2h0RmllbGQsIHRoaXMuY3B1R0IpO1xyXG4gICAgICBhd2FpdCBEaXNwbGF5LnNldFN0YXR1cyhzdHIpO1xyXG4gICAgICB0aGlzLmNoZWNrR2FtZVN0YXR1cygpO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMuZ2FtZVN0YXR1cyAmJiB0aGlzLmNwdU1vdmUpIHtcclxuICAgICAgbGV0IGMgPSBhd2FpdCB0aGlzLmNwdS5jcHVNb3ZlKCk7XHJcbiAgICAgIHN0ciA9IFwiRW5lbXkncyBzaG90OiBcIiArIGMgKyAnLiAnICsgdGhpcy5odW1hbkdCLmdldEluZm9TaG9vdChjKTtcclxuICAgICAgRGlzcGxheS5kcmF3U2hvb3QoRGlzcGxheS5sZWZ0RmllbGQsIHRoaXMuaHVtYW5HQik7XHJcbiAgICAgIGF3YWl0IERpc3BsYXkuc2V0U3RhdHVzKHN0cik7XHJcblxyXG4gICAgICB0aGlzLmNoZWNrR2FtZVN0YXR1cygpO1xyXG4gICAgICB0aGlzLmNwdU1vdmUgPSBmYWxzZTtcclxuICAgIH1cclxuICAgIGlmICghdGhpcy5nYW1lU3RhdHVzKSB7XHJcbiAgICAgIHRoaXMuZmluaXNoR2FtZSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZmluaXNoR2FtZSgpIHtcclxuICAgIGlmICghdGhpcy5odW1hbkdCLmFsbFNoaXBzU3VuaygpICYmICF0aGlzLmNwdUdCLmFsbFNoaXBzU3VuaygpKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGxldCB3aW5TdHIgPSAnJztcclxuICAgIGlmICghdGhpcy5odW1hbkdCLmFsbFNoaXBzU3VuaygpKSB7XHJcbiAgICAgIHdpblN0ciA9ICdDb25ncmF0dWxhdHVsYXRpb25zISBZb3UgYXJlIHRoZSB3aW5uZXIhJztcclxuICAgIH0gZWxzZSBpZiAodGhpcy5odW1hbkdCLmFsbFNoaXBzU3VuaygpKSB7XHJcbiAgICAgIHdpblN0ciA9ICdTb3JyeSEgWW91IGxvc2UhJztcclxuICAgIH1cclxuICAgIERpc3BsYXkuc2V0U3RhdHVzKHdpblN0cik7XHJcbiAgICBEaXNwbGF5LnN0YXJ0QnRuLnNldEF0dHJpYnV0ZSgnc3RhdHVzJywgJ2luaXQnKTtcclxuICAgIERpc3BsYXkudG9nZ2xlSW5hY3RpdmVCdXR0b24oKTtcclxuICB9XHJcblxyXG4gIGFzeW5jIGluaXRHYW1lKCkge1xyXG4gICAgRGlzcGxheS5zdGFydEJ0bi5zZXRBdHRyaWJ1dGUoJ3N0YXR1cycsICdpbmFjdGl2ZScpO1xyXG4gICAgdGhpcy5uZXdHYW1lKCk7XHJcbiAgICB0aGlzLmdhbWVTdGF0dXMgPSBmYWxzZTtcclxuICAgIHRoaXMuY3B1R0IucmFuZG9tUGxhY2VTaGlwcygpO1xyXG4gICAgdGhpcy5odW1hbkdCLnJhbmRvbVBsYWNlU2hpcHMoKTtcclxuICAgIERpc3BsYXkuZXJhc2VGaWVsZHMoKTtcclxuICAgIGF3YWl0IERpc3BsYXkuc2V0U3RhdHVzKFxyXG4gICAgICAnV2VsY29tZSB0byB0aGUgbmV3IGdhbWUuIEZvbGxvdyB0aGUgaW5zdHJ1Y3Rpb25zLidcclxuICAgICk7XHJcbiAgICBhd2FpdCBEaXNwbGF5LnNldFN0YXR1cyhcclxuICAgICAgJ0RyYWcgYW5kIGRyb3AgdG8gcGxhY2UgeW91ciBzaGlwcy4gRG91YmxlIGNsaWNrIHRvIHJvdGF0ZS4gU2hpcHMgY2FuXFwndCBiZSBkaXNwb3NlZCBzaWRlIGJ5IHNpZGUuIFByZXNzIFwiU3RhcnQgdGhlIGJhdHRsZSFcIiB0byBzdGFydC4nXHJcbiAgICApO1xyXG4gICAgRGlzcGxheS5kcmF3U2hpcHMoRGlzcGxheS5sZWZ0RmllbGQsIHRoaXMuaHVtYW5HQik7XHJcbiAgICBEaXNwbGF5LnN0YXJ0QnRuLnNldEF0dHJpYnV0ZSgnc3RhdHVzJywgJ3N0YXJ0Jyk7XHJcbiAgfVxyXG5cclxuICBhc3luYyBzdGFydEdhbWUoKSB7XHJcbiAgICB0aGlzLmdhbWVTdGF0dXMgPSB0cnVlO1xyXG4gICAgdGhpcy5jcHVNb3ZlID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMik7XHJcbiAgICBsZXQgc3RyID0gJ0dhbWUgaXMgb24uJztcclxuICAgIHRoaXMuY3B1TW92ZVxyXG4gICAgICA/IChzdHIgKz0gJyBDb21wdXRlciBzaG9vdHMgZmlyc3QuJylcclxuICAgICAgOiAoc3RyICs9ICcgWW91IHNob290IGZpcnN0LicpO1xyXG4gICAgYXdhaXQgRGlzcGxheS5zZXRTdGF0dXMoc3RyKTtcclxuICAgIGlmICh0aGlzLmNwdU1vdmUpIHtcclxuICAgICAgdGhpcy5nYW1lU3RlcCgpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgR2FtZTtcclxuIiwiaW1wb3J0IERpc3BsYXkgZnJvbSAnLi9kaXNwbGF5JztcclxuXHJcbmNvbnN0IEV2ZW50cyA9IChnYW1lKSA9PiB7XHJcbiAgbGV0IHRlbXBTaGlwSW5mbyA9IHt9O1xyXG5cclxuICBEaXNwbGF5LnN0YXJ0QnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2ZW50KSA9PiB7XHJcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgaWYgKGV2ZW50LnRhcmdldC5nZXRBdHRyaWJ1dGUoJ3N0YXR1cycpID09PSAnaW5hY3RpdmUnKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmIChldmVudC50YXJnZXQuZ2V0QXR0cmlidXRlKCdzdGF0dXMnKSA9PT0gJ2luaXQnICYmIGdhbWUuZ2FtZVN0YXR1cykge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAoZXZlbnQudGFyZ2V0LmdldEF0dHJpYnV0ZSgnc3RhdHVzJykgPT09ICdzdGFydCcgJiYgIWdhbWUuZ2FtZVN0YXR1cykge1xyXG4gICAgICBnYW1lLnN0YXJ0R2FtZSgpO1xyXG4gICAgICBEaXNwbGF5LnRvZ2dsZUluYWN0aXZlQnV0dG9uKCk7XHJcbiAgICB9IGVsc2UgaWYgKFxyXG4gICAgICBldmVudC50YXJnZXQuZ2V0QXR0cmlidXRlKCdzdGF0dXMnKSA9PT0gJ2luaXQnICYmXHJcbiAgICAgICFnYW1lLmdhbWVTdGF0dXNcclxuICAgICkge1xyXG4gICAgICBnYW1lLmluaXRHYW1lKCk7XHJcbiAgICB9XHJcbiAgICBEaXNwbGF5LnRvZ2dsZUJ1dHRvbnMoKTtcclxuICB9KTtcclxuXHJcbiAgRGlzcGxheS5yYW5kb21pc2UuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZlbnQpID0+IHtcclxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICBpZiAoXHJcbiAgICAgIERpc3BsYXkuc3RhcnRCdG4uZ2V0QXR0cmlidXRlKCdzdGF0dXMnKSA9PT0gJ2luYWN0aXZlJyB8fFxyXG4gICAgICBEaXNwbGF5LnN0YXJ0QnRuLmdldEF0dHJpYnV0ZSgnc3RhdHVzJykgPT09ICdpbml0J1xyXG4gICAgKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmIChcclxuICAgICAgIWdhbWUuZ2FtZVN0YXR1cyAmJlxyXG4gICAgICBEaXNwbGF5LnN0YXJ0QnRuLmdldEF0dHJpYnV0ZSgnc3RhdHVzJykgPT09ICdzdGFydCdcclxuICAgICkge1xyXG4gICAgICBnYW1lLmh1bWFuR0IucmFuZG9tUGxhY2VTaGlwcygpO1xyXG4gICAgICBEaXNwbGF5LmVyYXNlRmllbGQoRGlzcGxheS5sZWZ0RmllbGQpO1xyXG4gICAgICBEaXNwbGF5LmRyYXdTaGlwcyhEaXNwbGF5LmxlZnRGaWVsZCwgZ2FtZS5odW1hbkdCKTtcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgZnVuY3Rpb24gY2xpY2tFbmVteUNlbGwoZXZlbnQpIHtcclxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICBpZiAoIWdhbWUuZ2FtZVN0YXR1cykge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAoZXZlbnQudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnc2ltcGxlJykgJiYgIWdhbWUuY3B1TW92ZSkge1xyXG4gICAgICBsZXQgY29vcmQgPSBldmVudC50YXJnZXQuZ2V0QXR0cmlidXRlKCdjb29yZCcpO1xyXG4gICAgICBnYW1lLmdhbWVTdGVwKGNvb3JkKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGRvdWJsZUNsaWNrTXlDZWxsKGV2ZW50KSB7XHJcbiAgICBpZiAoIWdhbWUuZ2FtZVN0YXR1cykge1xyXG4gICAgICBsZXQgY29vcmQgPSBldmVudC50YXJnZXQuZ2V0QXR0cmlidXRlKCdjb29yZCcpO1xyXG4gICAgICBnYW1lLmh1bWFuR0Iucm90YXRlU2hpcENvb3JkKGNvb3JkKTtcclxuICAgICAgRGlzcGxheS5lcmFzZUZpZWxkKERpc3BsYXkubGVmdEZpZWxkKTtcclxuICAgICAgRGlzcGxheS5kcmF3U2hpcHMoRGlzcGxheS5sZWZ0RmllbGQsIGdhbWUuaHVtYW5HQik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBEaXNwbGF5LnJpZ2h0RmllbGQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjbGlja0VuZW15Q2VsbCk7XHJcbiAgRGlzcGxheS5sZWZ0RmllbGQuYWRkRXZlbnRMaXN0ZW5lcignZGJsY2xpY2snLCBkb3VibGVDbGlja015Q2VsbCk7XHJcblxyXG4gIGZ1bmN0aW9uIG1vdXNlRG93bihldmVudCkge1xyXG4gICAgaWYgKGdhbWUuZ2FtZVN0YXR1cykge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBsZXQgZWxlbSA9IGV2ZW50LnRhcmdldDtcclxuICAgIGxldCBmcm9tQ29vcmQgPSBlbGVtLmdldEF0dHJpYnV0ZSgnY29vcmQnKTtcclxuICAgIGxldCBzaGlwID0gZ2FtZS5odW1hbkdCLmZpbmRTaGlwQnlDb29yZChmcm9tQ29vcmQpO1xyXG4gICAgaWYgKCFzaGlwKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHRlbXBTaGlwSW5mby5mcm9tRWxlbSA9IGVsZW07XHJcbiAgICB0ZW1wU2hpcEluZm8uc2hpcCA9IHNoaXA7XHJcbiAgICB0ZW1wU2hpcEluZm8uZnJvbUNvb3JkID0gZnJvbUNvb3JkO1xyXG4gICAgdGVtcFNoaXBJbmZvLnBvcyA9IHNoaXAuY29vcmRpbmF0ZXMuZmluZEluZGV4KChlbGVtKSA9PiB7XHJcbiAgICAgIHJldHVybiBlbGVtID09PSBmcm9tQ29vcmQ7XHJcbiAgICB9KTtcclxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBuZXdGcm9tQ29vcmQoc2hpcCwgY29vcmRUbykge1xyXG4gICAgbGV0IHJlc0Nvb3JkO1xyXG4gICAgbGV0IGxldHRlciA9IGdhbWUuaHVtYW5HQi5kZXRlY3RDb29yZGluYXRlcyhjb29yZFRvKS5sZXR0ZXI7XHJcbiAgICBsZXQgZGlnaXQgPSBnYW1lLmh1bWFuR0IuZGV0ZWN0Q29vcmRpbmF0ZXMoY29vcmRUbykuZGlnaXQ7XHJcbiAgICBpZiAoc2hpcC5ob3Jpc29udGFsKSB7XHJcbiAgICAgIHJlc0Nvb3JkID1cclxuICAgICAgICBTdHJpbmcuZnJvbUNoYXJDb2RlKGxldHRlci5jaGFyQ29kZUF0KDApIC0gdGVtcFNoaXBJbmZvLnBvcykgKyBkaWdpdDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJlc0Nvb3JkID0gbGV0dGVyICsgKGRpZ2l0IC0gdGVtcFNoaXBJbmZvLnBvcyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzQ29vcmQ7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBmaWVsZHNUb0VubGlnaHQoY3VycmVudENvb3JkKSB7XHJcbiAgICBsZXQgZnJvbUNvb3JkID0gbmV3RnJvbUNvb3JkKHRlbXBTaGlwSW5mby5zaGlwLCBjdXJyZW50Q29vcmQpO1xyXG4gICAgbGV0IGNvb3JkaW5hdGVzID0gZ2FtZS5odW1hbkdCLmNyZWF0ZVNoaXBDb29yZGluYXRlcyhcclxuICAgICAgZnJvbUNvb3JkLFxyXG4gICAgICB0ZW1wU2hpcEluZm8uc2hpcC5sZW5ndGgsXHJcbiAgICAgIHRlbXBTaGlwSW5mby5zaGlwLmhvcmlzb250YWxcclxuICAgICk7XHJcbiAgICBsZXQgY2VsbHMgPSBjb29yZGluYXRlcy5tYXAoKGNvb3JkKSA9PiB7XHJcbiAgICAgIHJldHVybiBEaXNwbGF5LmxlZnRGaWVsZC5xdWVyeVNlbGVjdG9yKGBbY29vcmQ9JHtjb29yZH1dYCk7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBjZWxscztcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGVubGlnaHRGaWVsZHMoY2VsbHMsIHByb3ApIHtcclxuICAgIGxldCBlbGVtcyA9IERpc3BsYXkubGVmdEZpZWxkLnF1ZXJ5U2VsZWN0b3JBbGwoJy5zaW1wbGUnKTtcclxuICAgIGVsZW1zLmZvckVhY2goKGVsZW0pID0+IHtcclxuICAgICAgaWYgKGNlbGxzLmluY2x1ZGVzKGVsZW0pKSB7XHJcbiAgICAgICAgZWxlbS5jbGFzc0xpc3QuYWRkKHByb3ApO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGVsZW0uY2xhc3NMaXN0LnJlbW92ZShwcm9wKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBtb3VzZU92ZXIoZXZlbnQpIHtcclxuICAgIGlmICghdGVtcFNoaXBJbmZvLnNoaXApIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgbGV0IGVsZW0gPSBldmVudC50YXJnZXQ7XHJcbiAgICBsZXQgY2VsbHMgPSBmaWVsZHNUb0VubGlnaHQoZWxlbS5nZXRBdHRyaWJ1dGUoJ2Nvb3JkJykpO1xyXG4gICAgZW5saWdodEZpZWxkcyhjZWxscywgJ21vdmluZycpO1xyXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIG1vdXNlTGVhdmUoZXZlbnQpIHtcclxuICAgIGlmICghdGVtcFNoaXBJbmZvLnNoaXApIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgbGV0IGVsZW0gPSBldmVudC50YXJnZXQ7XHJcbiAgICBlbGVtLmNsYXNzTGlzdC5yZW1vdmUoJ21vdmluZycpO1xyXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIG1vdXNlVXAoZXZlbnQpIHtcclxuICAgIGxldCBlbGVtVG8gPSBldmVudC50YXJnZXQ7XHJcbiAgICBsZXQgdG9Db29yZCA9IGVsZW1Uby5nZXRBdHRyaWJ1dGUoJ2Nvb3JkJyk7XHJcbiAgICBpZiAoIXRlbXBTaGlwSW5mby5mcm9tRWxlbSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBsZXQgc2hpZnRDb29yZCA9IG5ld0Zyb21Db29yZCh0ZW1wU2hpcEluZm8uc2hpcCwgdG9Db29yZCk7XHJcbiAgICBnYW1lLmh1bWFuR0IubW92ZVNoaXAodGVtcFNoaXBJbmZvLnNoaXAsIHNoaWZ0Q29vcmQpO1xyXG4gICAgdGVtcFNoaXBJbmZvID0ge307XHJcbiAgICBEaXNwbGF5LmVyYXNlRmllbGQoRGlzcGxheS5sZWZ0RmllbGQpO1xyXG4gICAgRGlzcGxheS5kcmF3U2hpcHMoRGlzcGxheS5sZWZ0RmllbGQsIGdhbWUuaHVtYW5HQik7XHJcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gIH1cclxuXHJcbiAgbGV0IGNlbGxzID0gQXJyYXkuZnJvbShEaXNwbGF5LmxlZnRGaWVsZC5xdWVyeVNlbGVjdG9yQWxsKCcuc2ltcGxlJykpO1xyXG4gIGNlbGxzLmZvckVhY2goKGVsZW0pID0+IHtcclxuICAgIGVsZW0uYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgbW91c2VEb3duKTtcclxuICAgIGVsZW0uYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIG1vdXNlVXApO1xyXG4gICAgZWxlbS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW92ZXInLCBtb3VzZU92ZXIpO1xyXG4gIH0pO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgRXZlbnRzO1xyXG4iXSwibmFtZXMiOlsiX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18iLCJVUkwiLCJfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMV9fXyIsIl9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8yX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzNfX18iLCJfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfNF9fXyIsIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzFfX18iLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8yX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfM19fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzRfX18iLCJwdXNoIiwibW9kdWxlIiwiaWQiLCJleHBvcnRzIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsIm5lZWRMYXllciIsImNvbmNhdCIsImxlbmd0aCIsImpvaW4iLCJpIiwibW9kdWxlcyIsIm1lZGlhIiwiZGVkdXBlIiwic3VwcG9ydHMiLCJsYXllciIsInVuZGVmaW5lZCIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJrIiwiX2siLCJ1cmwiLCJvcHRpb25zIiwiU3RyaW5nIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJ0ZXN0Iiwic2xpY2UiLCJoYXNoIiwibmVlZFF1b3RlcyIsInJlcGxhY2UiLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2UiLCJzb3VyY2VSb290Iiwic3R5bGVzSW5ET00iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJyZXN1bHQiLCJtb2R1bGVzVG9Eb20iLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJiYXNlIiwiY291bnQiLCJpbmRleEJ5SWRlbnRpZmllciIsIm9iaiIsImNzcyIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkRWxlbWVudFN0eWxlIiwiYnlJbmRleCIsInNwbGljZSIsImFwaSIsImRvbUFQSSIsInVwZGF0ZSIsIm5ld09iaiIsInJlbW92ZSIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJpbmRleCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pIiwiX2luZGV4IiwibWVtbyIsImluc2VydCIsInN0eWxlIiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ3aW5kb3ciLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwiZ2V0VGFyZ2V0IiwiRXJyb3IiLCJhcHBlbmRDaGlsZCIsImVsZW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlcyIsImF0dHJpYnV0ZXMiLCJzdHlsZUVsZW1lbnQiLCJub25jZSIsInNldEF0dHJpYnV0ZSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlVGFnVHJhbnNmb3JtIiwiYXBwbHkiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImZpcnN0Q2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJtIiwibiIsImdldHRlciIsImQiLCJhIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJnIiwiZ2xvYmFsVGhpcyIsIkZ1bmN0aW9uIiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsInNjcmlwdFVybCIsImltcG9ydFNjcmlwdHMiLCJsb2NhdGlvbiIsImN1cnJlbnRTY3JpcHQiLCJzcmMiLCJzY3JpcHRzIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJwIiwiYiIsImJhc2VVUkkiLCJzZWxmIiwiaHJlZiIsIm5jIiwiZmllbGQiLCJBIiwiQiIsIkMiLCJEIiwiRSIsIkYiLCJHIiwiSCIsIkkiLCJKIiwic2hpcENvbnRhaW5lciIsIm1pc3NlZEF0dGFja3MiLCJoaXRzIiwiZGV0ZWN0Q29vcmRpbmF0ZXMiLCJsZXR0ZXJEaWdpdCIsInJlZ09iaiIsIm1hdGNoIiwibCIsInBhcnNlSW50IiwibGV0dGVyIiwiZGlnaXQiLCJpc0Vub3VnaFBsYWNlIiwiZnJvbUNvb3JkIiwiaG9yaXNvbnRhbCIsImRpZmZlcmVuY2UiLCJjb29yZGluYXRlcyIsImNoYXJDb2RlQXQiLCJmaW5kU2hpcENvb3JkIiwicmVzIiwiZm9yRWFjaCIsInNoaXAiLCJpbmNsdWRlcyIsImZpbmRTaGlwQnlDb29yZCIsImZpbmQiLCJmaW5kRmllbGRzVG9WZXJpZnkiLCJtYXhDaGFyQ29kZSIsIm1pbkNoYXJDb2RlIiwiZmllbGRzQXJyYXkiLCJpbml0TGV0dGVyQ29kZSIsImluaXREaWdpdCIsImxldHRlckNvZGUiLCJzdHIiLCJmcm9tQ2hhckNvZGUiLCJpc0Nsb3NlU2hpcCIsImNoZWNrRm9yQ2xvc2VTaGlwcyIsImNvb3JkT2JqIiwiY3JlYXRlU2hpcENvb3JkaW5hdGVzIiwiY3JlYXRlU2hpcCIsImRhbWFnZXMiLCJoaXQiLCJpc1N1bmMiLCJnZXRSYW5kb21EYXRhIiwiZGlyZWN0aW9uIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwicGxhY2VTaGlwIiwiZXJhc2VTaGlwQ29vcmRpbmF0ZXMiLCJyb3RhdGVTaGlwIiwic2FmZUNvb3JkIiwiaGl0QXR0YWNrIiwiY29sIiwicm93IiwiY29vcmQiLCJlbGVtIiwiaGl0QXJvdW5kIiwiYXJvdW5kU3Vua1NoaXAiLCJhbGxTaGlwc1N1bmsiLCJyZWR1Y2UiLCJyYW5kb21QbGFjZVNoaXBzIiwic29ydCIsInJhbmRvbURhdGEiLCJjcmVhdGVBbGxTaGlwcyIsInJvdGF0ZVNoaXBDb29yZCIsIm1vdmVTaGlwIiwidG9Db29yZCIsImdldEluZm9TaG9vdCIsIm93bkdCIiwib3Bwb25lbnRHQiIsImlzQ3B1IiwiZ2V0UmFuZG9tQ29vcmRpbmF0ZXMiLCJtb3ZlSXNBdmFpbGFibGUiLCJmaW5kQmVzdE1vdmUiLCJjcHVIaXRzIiwibWVtIiwid2VpZ2hPcHRpb25zIiwibW92ZXMiLCJnZXRNYXgiLCJtYXhXZWlnaHQiLCJiZXN0TW92ZSIsIndlaWdodCIsImNwdU1lbW9yeSIsImNvbnN0cnVjdG9yIiwibGVmdCIsInJpZ2h0IiwidG9wIiwiYm90dG9tIiwiZ2V0Q29vcmRzRm9yQXR0YWNrIiwiZ2IiLCJyZXNPYmoiLCJjcHVNb3ZlIiwicmFuZG9tTW92ZSIsIlByb21pc2UiLCJyZXNvbHZlIiwibWVtb3J5SGl0IiwiYW5hbHlzZVByZXZpb3VzTW92ZSIsInNldFRpbWVvdXQiLCJwbGF5ZXJNb3ZlIiwibGluayIsInJlbCIsInR5cGUiLCJpbm5lckhUTUwiLCJjcmVhdGVDZWxsIiwiY2VsbCIsImNsYXNzTGlzdCIsImFkZCIsImlucHV0Q2VsbHMiLCJjaGFyIiwiaW5pdENvZGUiLCJ0ZXh0Q29udGVudCIsImxlZnRGaWVsZCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJyaWdodEZpZWxkIiwic3RhcnRCdG4iLCJzdGF0dXMiLCJyYW5kb21pc2UiLCJmaW5kQ2VsbEJ5Q29vcmQiLCJBcnJheSIsImZyb20iLCJjaGlsZE5vZGVzIiwiZ2V0QXR0cmlidXRlIiwiZXJhc2VGaWVsZCIsImNvbnRhaW5zIiwiZGVsYXkiLCJtcyIsImRyYXdTaGlwcyIsImRyYXdTaG9vdCIsImVyYXNlRmllbGRzIiwic2V0U3RhdHVzIiwiYXN5bmMiLCJjaGFycyIsInNwbGl0IiwidG9nZ2xlQnV0dG9ucyIsInRvZ2dsZUluYWN0aXZlQnV0dG9uIiwiY3B1R0IiLCJodW1hbkdCIiwiaHVtYW4iLCJjcHUiLCJnYW1lU3RhdHVzIiwibmV3R2FtZSIsImNoZWNrR2FtZVN0YXR1cyIsImMiLCJmaW5pc2hHYW1lIiwid2luU3RyIiwiZ2FtZVN0ZXAiLCJpbml0R2FtZSIsImdhbWUiLCJ0ZW1wU2hpcEluZm8iLCJtb3VzZURvd24iLCJldmVudCIsImZyb21FbGVtIiwicG9zIiwiZmluZEluZGV4IiwicHJldmVudERlZmF1bHQiLCJuZXdGcm9tQ29vcmQiLCJjb29yZFRvIiwicmVzQ29vcmQiLCJtb3VzZU92ZXIiLCJjZWxscyIsImN1cnJlbnRDb29yZCIsImZpZWxkc1RvRW5saWdodCIsIm1vdXNlVXAiLCJzaGlmdENvb3JkIiwic3RhcnRHYW1lIiwiYWRkRXZlbnRMaXN0ZW5lciJdLCJzb3VyY2VSb290IjoiIn0=